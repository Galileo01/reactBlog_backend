[2021-02-21T12:37:59.199] [INFO] default - OPTIONS /post/add  200  2 ms
[2021-02-21T12:37:59.206] [ERROR] default - ReferenceError: ste is not defined
    at E:\Web-Prpjects\react_blog\backend\router\post.js:12:9
    at Layer.handle [as handle_request] (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\layer.js:95:5)
    at next (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\layer.js:95:5)
    at E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:335:12)
    at next (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:174:3)
    at router (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:47:12)
[2021-02-21T12:37:59.209] [ERROR] default - POST /post/add  500  3 ms
[2021-02-21T12:38:10.021] [INFO] default - OPTIONS /post/add  200  6 ms
[2021-02-21T12:38:10.326] [INFO] default - 获取连接
[2021-02-21T12:38:10.328] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'red',fontSize:'18px'}**}

外层花括号表示 内层使用js 表达式，
' at line 26
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Handshake.onConnect (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:64:7)
    at Handshake.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Handshake._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Handshake.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Handshake.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'red',fontSize:'18px'}**}\r\n" +
    '\r\n' +
    '外层花括号表示 内层使用js 表达式，\r\n' +
    "\r' at line 26",
  sqlState: '42000',
  index: 0,
  sql: '\n' +
    '         INSERT INTO post\n' +
    '         VALUES (\n' +
    "             null,'react.md',1,'','学习笔记',now(),'## React 学习笔记CHAR(13)CHAR(10)\n" +
    '### 001简介\r\n' +
    '\r\n' +
    '### 001 hello_react案例\r\n' +
    '\r\n' +
    '### 002 虚拟DOM的两种创建方式\r\n' +
    '\r\n' +
    '### 003 jsx语法\r\n' +
    '\r\n' +
    '1. 不用引号包裹jsx\r\n' +
    '\r\n' +
    ' 2. 标签属性和内容中使用js **表达式**使用**{**varname**}** \r\n' +
    '\r\n' +
    '    jsx 中只能嵌入**表达式**（带有返回值）\r\n' +
    '\r\n' +
    'ps：vue中标签属性中使用js表达式用:class=“{varname}”\r\n' +
    '\r\n' +
    '标签内容中使用js 表达式 用插值语法{{varname}}\r\n' +
    '\r\n' +
    '3. 标签的 class 属性 用className代替\r\n' +
    '\r\n' +
    '**规避 ES6的 class 关键字**\r\n' +
    '\r\n' +
    "4. 内联样式必须**使用对象 形式**{**{color:'red',fontSize:'18px'}**}\r\n" +
    '\r\n' +
    '外层花括号表示 内层使用js 表达式，\r\n' +
    '\r\n' +
    '里层对花括号 表示是 一个对象\r\n' +
    '\r\n' +
    '5. 单个根标签\r\n' +
    '\r\n' +
    '6. 标签必须闭合\r\n' +
    '\r\n' +
    '7. 标签名称\r\n' +
    '   - 若首字母是小写，转为html 中对应元素，没有则会报错\r\n' +
    '   - 若首字母是大写字母，视为组件并渲染\r\n' +
    '\r\n' +
    '### 004 jsx小练习\r\n' +
    '\r\n' +
    'react 自动jsx 中的数组遍历，并把jsx 渲染\r\n' +
    '\r\n' +
    '### 005 组件化开发\r\n' +
    '\r\n' +
    '#### 1.组件定义\r\n' +
    '\r\n' +
    '###### 函数式组件\r\n' +
    '\r\n' +
    '- 使用**首字母大写的函数**返回jsx\r\n' +
    '\r\n' +
    '  jsx 的语法一节中 规定，大写的的标签 代表组件\r\n' +
    '\r\n' +
    '- render函数传入该**函数同名标签**，注意要闭合\r\n' +
    '\r\n' +
    'ps：使用babel 编译之后的函数式组件内部this为undefined ，原因是babel 自动开启严格模式“use strict”\r\n' +
    '\r\n' +
    '执行render 函数之后\r\n' +
    '\r\n' +
    '1. 解析组件标签，\r\n' +
    '2. 发现组件是函数定义，调用该函数 将返回的虚拟DOM 转为真实DOM\r\n' +
    '\r\n' +
    '```js\r\n' +
    'function MyComponent() {\r\n' +
    '        return <h1>函数式组件，适用于简单的组件</h1>\r\n' +
    '    }  \r\n' +
    "ReactDOM.render(<MyComponent/>,document.querySelector('.container'));\r\n" +
    '```\r\n' +
    '\r\n' +
    '###### 类式组件\r\n' +
    '\r\n' +
    '-  **必须继承React.Component 类**\r\n' +
    '\r\n' +
    '- **必须定义render 函数，返回jsx**\r\n' +
    '\r\n' +
    '  render函数 中的this指向 实例本身\r\n' +
    '\r\n' +
    '执行render 后\r\n' +
    '\r\n' +
    '1. 解析并找到组件定义，是一个类\r\n' +
    '2. 创建该类实例，调用该实例的render 方法\r\n' +
    '\r\n' +
    '本质上就是函数式组件，因为ES6的类也只是 语法糖\r\n' +
    '\r\n' +
    '**区别复杂组件和简单组件 关键在于 组件是否有状态**\r\n' +
    '\r\n' +
    '### 006.组件实例三大属性 state\r\n' +
    '\r\n' +
    '相当于Vue组件实例的 data 选项\r\n' +
    '\r\n' +
    '- 借助构造器constructor  初始化实例的属性\r\n' +
    '\r\n' +
    '  在constructor   中初始化组件实例的state 属性\r\n' +
    '\r\n' +
    '- 事件绑定\r\n' +
    '\r\n' +
    'react 中更推荐和方便的是使用**onxx句柄在标签上直接绑定**\r\n' +
    '\r\n' +
    '**onClick**={handler}  使用驼峰式命名\r\n' +
    '\r\n' +
    '- ps:句柄onclick 和 ele.onxxx和ele.addEventListener 的区别  \r\n' +
    '\r\n' +
    '  -  句柄onxx \r\n' +
    '\r\n' +
    '    在标签上绑定事件  处理函数（普通函数），this指向window\r\n' +
    '\r\n' +
    '  - ele.onxxx\r\n' +
    '\r\n' +
    '    绑定普通函数this指向 触发事件的元素本身\r\n' +
    '\r\n' +
    '    只能绑定一个处理函数， 会被后面的覆盖\r\n' +
    '\r\n' +
    '  - ele.addEventListener \r\n' +
    '\r\n' +
    '    this 指向触发事件本身\r\n' +
    '\r\n' +
    '- 处理函数中的this 指向问题\r\n' +
    '\r\n' +
    '**由于事件处理函数handler 是作为onClick 的回调，不是通过实例调用，而是直接调用 又由于类中的方法开启了局部的严格模式**\r\n' +
    '\r\n' +
    '所以onClick 执行处理函数时的this 并不是组件实例\r\n' +
    '\r\n' +
    '**解决方法：在构造函数中使用bind 方法绑定this为组件实例**\r\n' +
    '\r\n' +
    'bind方法绑定this 并返回一个新的函数，\r\n' +
    '\r\n' +
    '在构造函数中在实例上创建原型上的同名的绑定了this的 函数\r\n' +
    '\r\n' +
    '- 状态不可直接更改（直接赋值）， **使用setState**\r\n' +
    '\r\n' +
    '  this.setState({isHot:false}) **必须传入一个对象**\r\n' +
    '\r\n' +
    '  - 更新时 状态合并\r\n' +
    '\r\n' +
    '    **不要更改原来的state 再传入setState**\r\n' +
    '\r\n' +
    '  - 状态更新时**会重复render 函数**\r\n' +
    '\r\n' +
    '    性能问题？\r\n' +
    '\r\n' +
    '    ```jsx\r\n' +
    '    class Weather extends React.Component {\r\n' +
    '    \r\n' +
    '            constructor(props) {\r\n' +
    '                super(props);\r\n' +
    '                //初始化 状态\r\n' +
    '                this.state = {\r\n' +
    '                    isHot: true\r\n' +
    '                };\r\n' +
    '                this.changeWeatcher = this.changeWeatcher.bind(this);//在实例身上创建一个和原型上同名的 绑定了 this 的处理函数\r\n' +
    '            }\r\n' +
    '            render() {\r\n' +
    "                return <h2 onClick={this.changeWeatcher}>今天的天气很{this.state.isHot ? '炎热' : '凉爽'}</h2>\r\n" +
    '            }\r\n' +
    '            changeWeatcher() {\r\n' +
    '                //changeWeatcher 作为onClick的回调 ，作为一个引用赋值给onClick 在实际调用时并不是通过实例调用的  会造成this丢失\r\n' +
    '                // console.log(this);\r\n' +
    '                // this.state.isHot=false;\r\n' +
    '                console.log(this.state.isHot);\r\n' +
    '                this.setState({\r\n' +
    '                    isHot: !this.state.isHot\r\n' +
    '                })\r\n' +
    '            }\r\n' +
    '        }\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '  **在类中定义句柄的事件处理函数推荐使用 箭头函数**\r\n' +
    '\r\n' +
    '- 简写 \r\n' +
    '  \r\n' +
    '  - 在类中直接定义属性，省去构造函数的定义\r\n' +
    '  - 使用箭头函数解决this绑定问题\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'class Weather extends React.Component {\r\n' +
    '        state = { isHot: true };\r\n' +
    '        render() {\r\n' +
    "            console.log('render');\r\n" +
    "            return <h2 onClick={this.changeWeatcher}>今天的天气很{this.state.isHot ? '炎热' : '凉爽'}</h2>\r\n" +
    '        }\r\n' +
    '        //使用箭头函数  this 自动指向 定义时的实例\r\n' +
    '        changeWeatcher = () => {\r\n' +
    '            this.setState({\r\n' +
    '                isHot: !this.state.isHot\r\n' +
    '            })\r\n' +
    '        }\r\n' +
    '\r\n' +
    '    }\r\n' +
    '```\r\n' +
    '\r\n' +
    '### props 使用\r\n' +
    '\r\n' +
    '- 通过标签属性 传递 props\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    "  const p = { name: 'xm', age: 18, sex: true };\r\n" +
    `  ReactDOM.render(<Person name="xxx" age={18} sex={p.sex} />, document.querySelector('.container'));\r\n` +
    "  ReactDOM.render(<Person {...p} />, document.querySelector('.container'));\r\n" +
    '  ```\r\n' +
    '\r\n' +
    '  **props 只读**\r\n' +
    '\r\n' +
    '- **使用PropTypes**约束props\r\n' +
    '\r\n' +
    '  约束类型，默认值，必传  （类似于 Vue的type default required）\r\n' +
    '\r\n' +
    '  15之后需要额外引入\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    '   class Person extends React.Component {\r\n' +
    '          render() {\r\n' +
    '              const { name, age, sex } = this.props;\r\n' +
    '              return (<ul>\r\n' +
    '                  <li>姓名：{name}</li>\r\n' +
    '                  <li>年龄：{age}</li>\r\n' +
    "                  <li>性别：{sex? '男' : '女'}</li>\r\n" +
    '              </ul>);\r\n' +
    '          }\r\n' +
    '      };\r\n' +
    '      //类静态属性 propType 约束类型\r\n' +
    '      Person.propTypes = {\r\n' +
    '          name: PropTypes.string.isRequired,//限制 name 是字符串类型 并且必需\r\n' +
    '          age: PropTypes.number,//限制age 为number\r\n' +
    '          sex: PropTypes.bool,//布尔值\r\n' +
    '          speak: PropTypes.func,//规避 function 关键字\r\n' +
    '      };\r\n' +
    '      //通过静态属性defaultProps 设置默认值\r\n' +
    '      Person.defaultProps = {\r\n' +
    "          sex: '不男不女',\r\n" +
    '          age: 18\r\n' +
    '      }\r\n' +
    '  ```\r\n' +
    '\r\n' +
    '- 使用**static** 关键字简写\r\n' +
    '\r\n' +
    '定义为类的静态属性\r\n' +
    '\r\n' +
    '- 构造器和props 在组件的中的作用\r\n' +
    '\r\n' +
    '  在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 `super(props)`。否则，`this.props` **在构造函数中可能会出现未定义的 bug。**\r\n' +
    '\r\n' +
    '  通常，在 React 中，**构造函数仅用于以下两种情况：**\r\n' +
    '\r\n' +
    '  - 通过给 `this.state` 赋值对象来初始化[内部 state](https://react.docschina.org/docs/state-and-lifecycle.html)。\r\n' +
    '\r\n' +
    '  - 为[事件处理函数](https://react.docschina.org/docs/handling-events.html)绑定实例  （state 最开始的写法）\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '    构造器是否接收并传递给super 取决于是否要在构造器中 使用this.props\r\n' +
    '\r\n' +
    '    一般不写构造器\r\n' +
    '\r\n' +
    '- 函数式组件 通过参数 使用props\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    '  function Person(props) {\r\n' +
    '          {\r\n' +
    '              const { name, age, sex } = props;\r\n' +
    '              return (<ul>\r\n' +
    '                  <li>姓名：{name}</li>\r\n' +
    '                  <li>年龄：{age}</li>\r\n' +
    "                  <li>性别：{sex ? '男' : '女'}</li>\r\n" +
    '              </ul>);\r\n' +
    '          }\r\n' +
    '      }\r\n' +
    '  ```\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '### refs 的使用\r\n' +
    '\r\n' +
    '**保存dom 和组件（暂不支持函数式组件）的引用**\r\n' +
    '\r\n' +
    '- 字符串形式\r\n' +
    '\r\n' +
    '  标签上添加ref 属性，通过this.refs.xxx访问 \r\n' +
    '\r\n' +
    '  **最新版已经 并不推荐使用字符串形式**\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '- **回调函数形式**\r\n' +
    '\r\n' +
    '  ref 引用一个回调函数，react 在render 时执行,**并把当前的元素节点 传入**\r\n' +
    '\r\n' +
    '  **执行次数的问题：**\r\n' +
    '\r\n' +
    '  如果ref引用的是一个**内联函数**，那么会在**更新过程中（render 的调用**）被**执行两次，**，第一次调用为了**清空ref** 传入null，\r\n' +
    '\r\n' +
    '  使用 **实例自身方法 可**以  避免重复调用，但大多情况下 这是无关紧要的\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '- createRef 形式\r\n' +
    '\r\n' +
    '  React.createRef 返回一个容器，该容器可以存储被ref 所标识的节点\r\n' +
    '\r\n' +
    '  略微麻烦\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    '  class Demo extends React.Component {\r\n' +
    '      \t/*createRef 的形式*/\r\n' +
    '          span1 = React.createRef();\r\n' +
    '          state = {\r\n' +
    "              name: ''\r\n" +
    '          };\r\n' +
    '          clickHandelr = () => {\r\n' +
    '              console.log(this.input2);\r\n' +
    '              /*createRef x形式 采用 current 取值*/\r\n' +
    '              console.log(this.span1.current);\r\n' +
    '          }\r\n' +
    '          render() {\r\n' +
    '              // console.log(this.refs.input);\r\n' +
    '              return (\r\n' +
    '                  <div>\r\n' +
    '                       {/*字符串形式*/}\r\n' +
    '                      <input type="text" ref="input" />\r\n' +
    '                       {/*回调参数的形式*/}\r\n' +
    '                      <button onClick={this.clickHandelr}>点我</button>\r\n' +
    '                      \r\n' +
    '                      <input type="text" ref={e => this.input2 = e} />\r\n' +
    '                       {/*createRef 的形式*/}\r\n' +
    '                      <span ref={this.span1}></span>\r\n' +
    '                  </div>\r\n' +
    '              )\r\n' +
    '          }\r\n' +
    '  \r\n' +
    '      }\r\n' +
    '  ```\r\n' +
    '\r\n' +
    '  **当前 最推荐、最快捷 的是 使用内联 的回调函数**\r\n' +
    '\r\n' +
    '### React 中的事件处理\r\n' +
    '\r\n' +
    '- react 使用的是自定义（合成）事件，并不是原生DOM事件--为了兼容\r\n' +
    '- 是通过事件委托（委托给最外层元素）--为了高效\r\n' +
    '\r\n' +
    ' 通过event.target 引用 事件触发对象\r\n' +
    '\r\n' +
    '### 受控组件、非受控组件\r\n' +
    '\r\n' +
    '- 非受控组件\r\n' +
    '\r\n' +
    '表单元素是在用到的时候动态获取的\r\n' +
    '\r\n' +
    '- 受控组件\r\n' +
    '\r\n' +
    '表单元素的 value是 一直绑定的，\r\n' +
    '\r\n' +
    'React 没有提供双向绑定，没有类似v-model 的语法\r\n' +
    '\r\n' +
    '### 函数扩展\r\n' +
    '\r\n' +
    '使用**高阶函数**的 知识优化代码\r\n' +
    '\r\n' +
    '- 高阶函数 \r\n' +
    '\r\n' +
    '  接收一个函数为从参数，或者 返回值是一个函数\r\n' +
    '\r\n' +
    '- 函数柯里化\r\n' +
    '\r\n' +
    '  通过函数调用继续返回函数的形式，实现多次接收参数\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'class Demo extends React.Component {\r\n' +
    '        state = {\r\n' +
    "            name: '',\r\n" +
    "            password: ''\r\n" +
    '        };\r\n' +
    '        submitHandler = (e) => {\r\n' +
    '            e.preventDefault();\r\n' +
    '            console.log(this.state);\r\n' +
    '        }\r\n' +
    '        //使用函数柯里化\r\n' +
    '        saveFormData = (key) => {\r\n' +
    '            return (e) => {\r\n' +
    '                this.setState({\r\n' +
    '                    [key]: e.target.value\r\n' +
    '                })\r\n' +
    '            }\r\n' +
    '        }\r\n' +
    '        //不用柯里化\r\n' +
    '        saveFormData2 = (key, { target: { value } }) => {\r\n' +
    '            this.setState({\r\n' +
    '                [key]: parseInt(value)\r\n' +
    '            })\r\n' +
    '        }\r\n' +
    '        render() {\r\n' +
    '            // console.log(this.refs.input);\r\n' +
    '            return <form onSubmit={this.submitHandler}>\r\n' +
    `                <label for="username">用户名</label><input type="text" onChange={this.saveFormData('name')} name="username" />\r\n` +
    `                <label for="password">密码</label><input type="password" onChange={this.saveFormData('password')} name="password" />\r\n` +
    `                <label for="age">密码</label><input type="number" onChange={e => this.saveFormData2('age', e)} name="password" />\r\n` +
    '                <button>提交</button>\r\n' +
    '            </form>\r\n' +
    '        }\r\n' +
    '\r\n' +
    '    }\r\n' +
    '```\r\n' +
    '\r\n' +
    '### 生命周期\r\n' +
    '\r\n' +
    '- 引出\r\n' +
    '\r\n' +
    '  - componentDidMount 生命周期钩子，组件挂载后调用\r\n' +
    '\r\n' +
    '  - render 函数在初始化渲染，状态更新 时调用 \r\n' +
    '\r\n' +
    '  - componentWillUnmount 组件卸载之前 触发\r\n' +
    '\r\n' +
    '    调用**ReactDOM.unmountComponentAtNode(ele)** 可以卸载某个节点下的组件\r\n' +
    '\r\n' +
    '- 生命周期钩子（旧，16及其之前）\r\n' +
    '\r\n' +
    '  - **`componentDidMount()`**  **常用**\r\n' +
    '\r\n' +
    '    会在组件**挂载后（插入 DOM 树中）**立即调用**。依赖于 DOM 节点**的初始化应该放在这里。**如需通过网络请求获取数据，此处是实例化请求的好地方。**在里面 请求并调用setState 会触发render 函数\r\n' +
    '\r\n' +
    '    类似Vue的created 钩子\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - constructor(props)\r\n' +
    '\r\n' +
    '    在 React 组件挂载之前，会调用它的构造函数\r\n' +
    '\r\n' +
    '    在 `constructor()` 函数中**不要调用 `setState()` 方法**。如果你的组件需要使用内部 state，请直接在构造函数中为 **`this.state` 赋值初始 state**：\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - **componentWillUnmount()  常用**\r\n' +
    '\r\n' +
    '    componentWillUnmount() 会在组件卸载及销毁之前直接调用。**在此方法中执行必要的清理操作**，例如，清除 timer，取消网络请求或清除在 componentDidMount() 中创建的订阅等。\r\n' +
    '\r\n' +
    '    componentWillUnmount() 中不应调用 setState()，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - componentWillReceiveProps（props） 在props 更新时调用\r\n' +
    '\r\n' +
    '     **第一次接收props 渲染 并不会调用**\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - **setState**方法会检测shouldCompomentUpdate 方法的返回值，判断是否调用其他的钩子 重新渲染页面\r\n' +
    '\r\n' +
    '    shouldCompomentUpdate 若**返回true**（默认的shouldCompomentUpdate 函数返回true），会调用下方的所有周期钩子\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - forceUpdate 强制更新\r\n' +
    '\r\n' +
    '  - 生命周期图示\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  <img src="https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/2_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%97%A7).png" alt="2_react生命周期(旧)" style="zoom:67%;" />\r\n' +
    '\r\n' +
    '- **生命周期 （最新）**\r\n' +
    '\r\n' +
    '  最新版本将会**弃用旧版本的部分钩子**\r\n' +
    '\r\n' +
    '  在18中会在部分钩子（**除了willUnmount 之外的 包含will 的钩子都需要加上）**之前加上UNSAFE_xxx 才能正常工作，**尽量避免使用他们**\r\n' +
    '\r\n' +
    '  -   **static** getDerivedStateFromProps(**props**, **state**)    **从props获得派生的state**\r\n' +
    '\r\n' +
    '    新的静态 `getDerivedStateFromProps` 生命周期方法在组件实例化之后、render 之前、以及重新渲染之前调用。\r\n' +
    '\r\n' +
    '    它可以返回一个对象来更新 `state`，或者返回 `null` 来表示新的 `props` 不需要任何 `state` 的更新。\r\n' +
    '\r\n' +
    '    返回的对象，会影响 更新，state 会取决于更新\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - getSnapshotBeforeUpdate**(prevProps, prevState)**\r\n' +
    '\r\n' +
    '    在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件**能在发生更改之前从 DOM 中捕获一些信息**（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 `componentDidUpdate()`\r\n' +
    '\r\n' +
    '    应返回 snapshot 的值（或 `null`）。\r\n' +
    '\r\n' +
    '    案例\r\n' +
    '\r\n' +
    '  - componentDidUpdate(prevProps, prevState, snapshot)\r\n' +
    '\r\n' +
    '<img src="https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/3_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%96%B0).png" alt="3_react生命周期(新)" style="zoom: 67%;" />\r\n' +
    '\r\n' +
    '#### React 的diff算法\r\n' +
    '\r\n' +
    '对比的粒度 是标签级别，Vue的diff 算法 粒度更小\r\n' +
    '\r\n' +
    '- key 的作用（Vue/React 中常见的面试题）\r\n' +
    '\r\n' +
    '   *经典面试题:*\r\n' +
    '\r\n' +
    '     *1). react/vue中的key有什么作用？（key的内部原理是什么？）*\r\n' +
    '\r\n' +
    '     *2). 为什么遍历列表时，key最好不要用index?*\r\n' +
    '\r\n' +
    '     \r\n' +
    '\r\n' +
    '  ​      *1. 虚拟DOM中key的作用：*\r\n' +
    '\r\n' +
    '  ​          *1). 简单的说: **key是虚拟DOM节点对象的标识**, 在更新显示时key起着极其重要的作用。*\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '  ​          *2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,* \r\n' +
    '\r\n' +
    '  ​                        *随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：*\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '  ​                  *a. 旧虚拟DOM中找到了与新虚拟DOM**相同的key：***\r\n' +
    '\r\n' +
    '  ​                        *(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM*\r\n' +
    '\r\n' +
    '  ​                        *(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM*\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '  ​                  *b. 旧虚拟DOM中未找到与新虚拟DOM相同的key*\r\n' +
    '\r\n' +
    '  ​                        *根据数据创建新的真实DOM，随后渲染到到页面*\r\n' +
    '\r\n' +
    '  ​                  \r\n' +
    '\r\n' +
    '  ​      *2. 用index作为key可能会引发的问题：*\r\n' +
    '\r\n' +
    '  ​                *1. 若对数据进行：**逆序添加、逆序删除等**破坏顺序操作:*\r\n' +
    '\r\n' +
    '  ​                        *会**产生没有必要的真实DOM更新** ==> 界面效果没问题, 但效率低。*\r\n' +
    '\r\n' +
    '  ​\t\t\t\t\t\t错误的复用 旧的虚拟DOM\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '  ​                *2. 如果**结构中还包含输入类的DOM：***表单元素 **会被错误的复用**\r\n' +
    '\r\n' +
    '  ​                        ***会产生错误DOM更新** ==> 界面有问题。*\r\n' +
    '\r\n' +
    '  ​                        \r\n' +
    '\r\n' +
    '  ​                *3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，*\r\n' +
    '\r\n' +
    '  ​                  *仅用于渲染列表用于展示，使用index作为key是没有问题的。*\r\n' +
    '\r\n' +
    '  ​          \r\n' +
    '\r\n' +
    '  ​      *3. 开发中如何选择key?:*\r\n' +
    '\r\n' +
    '  ​                *1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。*\r\n' +
    '\r\n' +
    '  ​                *2.如果确定**只是简单的展示数据**，用index也是可以的。*\r\n' +
    '\r\n' +
    '### 使用 create-react-app  脚手架\r\n' +
    '\r\n' +
    '使用  **create-react-app 脚手架**  进行真实复杂的项目开发\r\n' +
    '\r\n' +
    '- 安装 \r\n' +
    '\r\n' +
    '  ```shell\r\n' +
    '  \r\n' +
    '  #create-react-app hello-react\r\n' +
    '  #npm init react-app my-app\r\n' +
    '  npx create-react-app my-app  ##最新 版本直接使用npx 创建项目，不用全局安装\r\n' +
    '  npx create-react-app my-app --template typescript\r\n' +
    '  npm run start #启动项目\r\n' +
    '  npm run eject#暴露出webpack 的配置文件  要进行定制化时需要加入 比如添加less 支持\r\n' +
    '  \r\n' +
    '  ```\r\n' +
    '\r\n' +
    '- \r\n' +
    '\r\n' +
    '- 目录结构介绍\r\n' +
    '\r\n' +
    '  - public 文件夹\r\n' +
    '\r\n' +
    '    存放静态资源，页面图片，公共资源\r\n' +
    '\r\n' +
    '    - **index.html 根html 文件**\r\n' +
    '\r\n' +
    '      ```html\r\n' +
    '      <!DOCTYPE html>\r\n' +
    '      <html lang="en">\r\n' +
    '      \r\n' +
    '      <head>\r\n' +
    '        <meta charset="utf-8" />\r\n' +
    '        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" /><!--PUBLIC_URL 代表public 文件夹路径-->\r\n' +
    '        <meta name="viewport" content="width=device-width, initial-scale=1" />\r\n' +
    '        <!--针对安卓手机浏览器的 主题---->\r\n' +
    '        <meta name="theme-color" content="#000000" />\r\n' +
    '        <meta name="description" content="Web site created using create-react-app" />\r\n' +
    '        <!--将网站添加到 手机主屏幕 快捷的 图标--->\r\n' +
    '        <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />\r\n' +
    '        <!--多种加壳应用 的资源配置--->\r\n' +
    '        <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />\r\n' +
    '        <title>hello react</title>\r\n' +
    '      </head>\r\n' +
    '      \r\n' +
    '      <body>\r\n' +
    '        <!--不支持或者 拦截js 的运行 就会显示-->\r\n' +
    '        <noscript>You need to enable JavaScript to run this app.</noscript>\r\n' +
    '        <!--根组件 的 容器-->\r\n' +
    '        <div id="root"></div>\r\n' +
    '      </body>\r\n' +
    '      \r\n' +
    '      </html>\r\n' +
    '      ```\r\n' +
    '\r\n' +
    '  - src 文件夹\r\n' +
    '\r\n' +
    '    - **App.js /App.css 根组件代码**\r\n' +
    '    - index.css 全局样式\r\n' +
    '    - **index.js 的入口文件，引入根组件和多种资源**\r\n' +
    '    - reportWebVitals 记录页面性能\r\n' +
    '    - setupTests 用于做组件测试\r\n' +
    '\r\n' +
    '- 测试\r\n' +
    '\r\n' +
    '- **样式文件的 模块化** \r\n' +
    '\r\n' +
    '  防止 不同组件的相同选择器的互相影响， 类似于 Vue 的  style scoped\r\n' +
    '\r\n' +
    '  样式文件改为  **index.module.css**\r\n' +
    '\r\n' +
    '  引入 ：**import xxx from  index.module.css**  \r\n' +
    '\r\n' +
    '  使用类名: **className={xxx.title}**\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '- **添加less** \r\n' +
    '\r\n' +
    '  安装less  less-loader\r\n' +
    '\r\n' +
    '  使用npm run eject#   暴露出webpack 的配置文件  要进行定制化时需要加入 比如添加less 支持\r\n' +
    '\r\n' +
    '  - 添加变量\r\n' +
    '\r\n' +
    '    <img src="https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/image-20210204200845448.png" alt="image-20210204200845448" style="zoom: 67%;" />\r\n' +
    '\r\n' +
    '    ```js\r\n' +
    '    // style files regexes\r\n' +
    '    const cssRegex = /\\.css$/;\r\n' +
    '    const cssModuleRegex = /\\.module\\.css$/;\r\n' +
    '    const sassRegex = /\\.(scss|sass)$/;\r\n' +
    '    const sassModuleRegex = /\\.module\\.(scss|sass)$/;\r\n' +
    '    //配置less文件 的匹配\r\n' +
    '    const lessRegex = /\\.less$/;\r\n' +
    '    const lessModuleRegex = /\\.module\\.less$/;\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - 添加 \r\n' +
    '\r\n' +
    '    在 module.exports 函数返回值 的module.rules.oneof 数组 下添加less-loader 模块 和\r\n' +
    '\r\n' +
    '    ```js\r\n' +
    '    //配置less\r\n' +
    '    //oneof:[] 数组后添加\r\n' +
    '                            {\r\n' +
    '                                test: lessRegex,\r\n' +
    '                                exclude: lessModuleRegex,\r\n' +
    '                                use: getStyleLoaders(\r\n' +
    '                                    {\r\n' +
    '                                        importLoaders: 3,\r\n' +
    '                                        sourceMap: isEnvProduction\r\n' +
    '                                            ? shouldUseSourceMap\r\n' +
    '                                            : isEnvDevelopment,\r\n' +
    '                                    },\r\n' +
    "                                    'less-loader'\r\n" +
    '                                ),\r\n' +
    '                                sideEffects: true,\r\n' +
    '                            },\r\n' +
    '                            {\r\n' +
    '                                test: lessModuleRegex,\r\n' +
    '                                use: getStyleLoaders(\r\n' +
    '                                    {\r\n' +
    '                                        importLoaders: 3,\r\n' +
    '                                        sourceMap: isEnvProduction\r\n' +
    '                                            ? shouldUseSourceMap\r\n' +
    '                                            : isEnvDevelopment,\r\n' +
    '                                        modules: {\r\n' +
    '                                            getLocalIdent: getCSSModuleLocalIdent,\r\n' +
    '                                        },\r\n' +
    '                                    },\r\n' +
    "                                    'less-loader'\r\n" +
    '                                ),\r\n' +
    '                            },\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '- **配置路径别名**\r\n' +
    '\r\n' +
    '  config/paths.js  追加 路径别名\r\n' +
    '\r\n' +
    '  ```js\r\n' +
    '  module.exports = {\r\n' +
    "      dotenv: resolveApp('.env'),\r\n" +
    "      appPath: resolveApp('.'),\r\n" +
    "      appBuild: resolveApp('build'),\r\n" +
    "      appPublic: resolveApp('public'),\r\n" +
    "      appHtml: resolveApp('public/index.html'),\r\n" +
    "      appIndexJs: resolveModule(resolveApp, 'src/index'),\r\n" +
    "      appPackageJson: resolveApp('package.json'),\r\n" +
    "      appSrc: resolveApp('src'),\r\n" +
    "      appTsConfig: resolveApp('tsconfig.json'),\r\n" +
    "      appJsConfig: resolveApp('jsconfig.json'),\r\n" +
    "      yarnLockFile: resolveApp('yarn.lock'),\r\n" +
    "      testsSetup: resolveModule(resolveApp, 'src/setupTests'),\r\n" +
    "      proxySetup: resolveApp('src/setupProxy.js'),\r\n" +
    "      appNodeModules: resolveApp('node_modules'),\r\n" +
    "      swSrc: resolveModule(resolveApp, 'src/service-worker'),\r\n" +
    '      publicUrlOrPath,\r\n' +
    '      //自定义路径别名\r\n' +
    "       assets: resolveApp('src/assets'),\r\n" +
    "    components: resolveApp('src/components'),\r\n" +
    "    network: resolveApp('src/network'),\r\n" +
    "    store: resolveApp('src/store'),\r\n" +
    "    router: resolveApp('src/router'),\r\n" +
    '  };\r\n' +
    '  \r\n' +
    '  ```\r\n' +
    '\r\n' +
    '  在 module.exports 函数返回值 的module.resolve.alias数组 下添加\r\n' +
    '\r\n' +
    '  ```js\r\n' +
    '  alias: {\r\n' +
    '                  // Support React Native Web\r\n' +
    '                  // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\r\n' +
    "                  'react-native': 'react-native-web',\r\n" +
    '                  //自定义 路径\r\n' +
    '                  components: paths.components,\r\n' +
    '                  assets: paths.assets,\r\n' +
    '                  network: paths.network,\r\n' +
    '                  // Allows for better profiling with ReactDevTools\r\n' +
    '                  ...(isEnvProductionProfile && {\r\n' +
    "                      'react-dom$': 'react-dom/profiling',\r\n" +
    "                      'scheduler/tracing': 'scheduler/tracing-profiling',\r\n" +
    '                  }),\r\n' +
    '                  ...(modules.webpackAliases || {}),\r\n' +
    '              },\r\n' +
    '  ```\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '- 配置代理\r\n' +
    '\r\n' +
    '  - 方法1在package.json中追加如下配置\r\n' +
    '\r\n' +
    '    ```json\r\n' +
    '    "proxy":"http://localhost:5000"\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '    说明：\r\n' +
    '\r\n' +
    '    1. 优点：配置简单，前端请求资源时可以不加任何前缀。\r\n' +
    '    2. 缺点：不能配置多个代理。\r\n' +
    '    3. 工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）\r\n' +
    '\r\n' +
    '  - 新建setupProxy.js 文件\r\n' +
    '\r\n' +
    '    1. 第一步：创建代理配置文件\r\n' +
    '\r\n' +
    '       ```\r\n' +
    '       在src下创建配置文件：src/setupProxy.js\r\n' +
    '       ```\r\n' +
    '\r\n' +
    '    2. 编写setupProxy.js配置具体代理规则：\r\n' +
    '\r\n' +
    '       ```js\r\n' +
    "       const proxy = require('http-proxy-middleware');//使用代理中间件\r\n" +
    '       \r\n' +
    '       module.exports = function(app) {\r\n' +
    '         app.use(\r\n' +
    "           proxy('/api1', {  //api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)\r\n" +
    "             target: 'http://localhost:5000', //配置转发目标地址(能返回数据的服务器地址)\r\n" +
    '             changeOrigin: true, //控制服务器接收到的请求头中host字段的值\r\n' +
    '             /*\r\n' +
    '             \tchangeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000\r\n' +
    '             \tchangeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000\r\n' +
    '             \tchangeOrigin默认值为false，但我们一般将changeOrigin值设为true\r\n' +
    '             */\r\n' +
    "             pathRewrite: {'^/api1': ''} //去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)\r\n" +
    '           }),\r\n' +
    "           proxy('/api2', { \r\n" +
    "             target: 'http://localhost:5001',\r\n" +
    '             changeOrigin: true,\r\n' +
    "             pathRewrite: {'^/api2': ''}\r\n" +
    '           })\r\n' +
    '         )\r\n' +
    '       }\r\n' +
    '       ```\r\n' +
    '\r\n' +
    '    说明：\r\n' +
    '\r\n' +
    '    1. 优点：可以配置多个代理，可以灵活的控制请求是否走代理。\r\n' +
    '    2. 缺点：配置繁琐，前端请求资源时必须加前缀\r\n' +
    '\r\n' +
    '- \r\n' +
    '\r\n' +
    '- 案例-1 todolist\r\n' +
    '\r\n' +
    '  - 子组件 给父组件 传递信息-**函数props**\r\n' +
    '\r\n' +
    '     父组件 给子组件通过props **传递一个函数**，子组件在适合的时机调用 \r\n' +
    '\r\n' +
    '    祖孙关系可以 逐层传递\r\n' +
    '  \r\n' +
    '- 案例-2\r\n' +
    '\r\n' +
    '  - 兄弟组件 相互通信 - 使用第三方库**消息订阅+消息发布**机制  \r\n' +
    '\r\n' +
    '    使用 第三方库 pubsub-js \r\n' +
    '\r\n' +
    '## 基础扩展\r\n' +
    '\r\n' +
    '### setState \r\n' +
    '\r\n' +
    '\t(1). setState(stateChange, [callback])------对象式的setState\r\n' +
    '\t        1.stateChange为状态改变对象(该对象可以体现出状态的更改)\r\n' +
    '\t        2.callback是可选的回调函数, 它在状态更新完毕、界面更新后(render调用后)才被调用\r\n' +
    '\t\t\t\t\t\r\n' +
    '\t(2). setState(updater, [callback])------函数式的setState\r\n' +
    '\t        1.updater为返回stateChange对象的函数。\r\n' +
    '\t        2.updater可以接收到state和props。\r\n' +
    '\t        4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。\r\n' +
    '\t 总结:\r\n' +
    '\t\t\t1.对象式的setState是函数式的setState的简写方式(语法糖)\r\n' +
    '\t\t\t2.使用原则：\r\n' +
    '\t\t\t\t\t(1).如果新状态不依赖于原状态 ===> 使用对象方式\r\n' +
    '\t\t\t\t\t(2).如果新状态依赖于原状态 ===> 使用函数方式\r\n' +
    '\t\t\t\t\t(3).如果需要在setState()执行后获取最新的状态数据, \r\n' +
    '\t\t\t\t\t\t要在第二个callback函数中读取\r\n' +
    'setState 是**异步更新状态，**\r\n' +
    '\r\n' +
    'setState()  将对组件 state 的更改**排入队列**，为了更好的感知性能，它会批量推迟更新，React 会延迟调用它，然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效。\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '### 组件懒加载 React.lazy函数\r\n' +
    '\r\n' +
    '组件的条件渲染\r\n' +
    '\r\n' +
    '会在 需要渲染 组件的时候才加载组件资源\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    "import React, { Component, lazy, Suspense } from 'react'\r\n" +
    '\r\n' +
    "const Test1 = lazy(() => import('./Test1'));\r\n" +
    "const Test2 = lazy(() => import('./Test2'))\r\n" +
    'export default class Lazy extends Component {\r\n' +
    '    state = {\r\n' +
    '        flag: false,\r\n' +
    '    }\r\n' +
    '    change = () => {\r\n' +
    '        this.setState({\r\n' +
    '            flag: true\r\n' +
    '        })\r\n' +
    '    }\r\n' +
    '    render() {\r\n' +
    '        return (\r\n' +
    '            <div>\r\n' +
    '                <Suspense fallback={<h1>Loging ....</h1>}>\r\n' +
    '                    <Test1 />\r\n' +
    '                    {this.state.flag && <Test2 />}\r\n' +
    '                </Suspense>\r\n' +
    '                <button onClick={this.change}>点击</button>\r\n' +
    '            </div>\r\n' +
    '        )\r\n' +
    '    }\r\n' +
    '}\r\n' +
    '\r\n' +
    '```\r\n' +
    '\r\n' +
    '配合 路由  使用\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    "import React, { Component, lazy, Suspense } from 'react'\r\n" +
    '//1.通过React的lazy函数配合import()函数动态加载路由组件 ===> 路由组件代码会被分开打包\r\n' +
    "const Login = React.lazy(()=>import('@/pages/Login'))\r\n" +
    '\r\n' +
    '//2.通过<Suspense>指定在加载得到路由打包文件前显示一个自定义loading界面\r\n' +
    '<Suspense fallback={<h1>loading.....</h1>}>\r\n' +
    '    <Switch>\r\n' +
    '        <Route path="/xxx" component={Xxxx}/>\r\n' +
    '        <Redirect to="/login"/>\r\n' +
    '    </Switch>\r\n' +
    '</Suspense>\r\n' +
    '```\r\n' +
    '### JSX 扩展\r\n' +
    '\r\n' +
    '- 点语法 指定元素类型\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    '  const MyComponents = {\r\n' +
    '    DatePicker: function DatePicker(props) {\r\n' +
    '      return <div>Imagine a {props.color} datepicker here.</div>;\r\n' +
    '    }\r\n' +
    '  }\r\n' +
    '  \r\n' +
    '  function BlueDatePicker() {\r\n' +
    '    return <MyComponents.DatePicker color="blue" />;\r\n' +
    '  }\r\n' +
    '  ```\r\n' +
    '\r\n' +
    '- 运行时选择类型\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    "  import { PhotoStory, VideoStory } from './stories';\r\n" +
    '  \r\n' +
    '  const components = {\r\n' +
    '    photo: PhotoStory,\r\n' +
    '    video: VideoStory\r\n' +
    '  };\r\n' +
    '  \r\n' +
    '  function Story(props) {\r\n' +
    '    // 错误！JSX 类型不能是一个表达式。  !!!!!!\r\n' +
    '    return <components[props.storyType] story={props.story} />;\r\n' +
    '      // 正确！JSX 类型可以是大写字母开头的变量。\r\n' +
    '    const SpecificStory = components[props.storyType];\r\n' +
    '    return <SpecificStory story={props.story} />;\r\n' +
    '  }\r\n' +
    '    \r\n' +
    '  ```\r\n' +
    '\r\n' +
    '- Props 默认值为 “True”\r\n' +
    '\r\n' +
    '  通常，我们不建议不传递 value 给 prop，**因为这可能与 [ES6 对象简写](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015)混淆**\r\n' +
    '\r\n' +
    '- jsx 中的子元素\r\n' +
    '\r\n' +
    '  包含在开始和结束标签之间的 JSX 表达式内容将作为特定属性 **`props.children`** 传递给外层组件\r\n' +
    '\r\n' +
    '  包含以下几种常见方法来传递子元素\r\n' +
    '\r\n' +
    '  - 字符串\r\n' +
    '\r\n' +
    '    ```jsx\r\n' +
    '    <MyComponent>Hello world!</MyComponent>\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '  - 子元素\r\n' +
    '\r\n' +
    '  - 表达式\r\n' +
    '\r\n' +
    '  - 函数\r\n' +
    '\r\n' +
    '  **注意：组件可以接受任意 props，包括基本数据类型，React 元素以及函数。**\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '### 条件渲染\r\n' +
    '\r\n' +
    '几种在jsx 中内联的条件渲染方式\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'export default class ConditionRender extends Component {\r\n' +
    '    render() {\r\n' +
    '        const flag = true;\r\n' +
    '        return (\r\n' +
    '            <div>\r\n' +
    '                <div>{\r\n' +
    '                    flag && (\r\n' +
    '                        <span>显示</span>\r\n' +
    '                    )\r\n' +
    '\r\n' +
    '                }</div>\r\n' +
    '                <div>\r\n' +
    '                    {\r\n' +
    '                        flag===true?(\r\n' +
    '                            <span>flag===true</span>\r\n' +
    '                        ):(\r\n' +
    '                            <span>flag===false</span>\r\n' +
    '                        )\r\n' +
    '                    }\r\n' +
    '                </div>\r\n' +
    '            </div>\r\n' +
    '        )\r\n' +
    '    }\r\n' +
    '}\r\n' +
    '\r\n' +
    '```\r\n' +
    '\r\n' +
    '### 组件之间的组合 Composition\r\n' +
    '\r\n' +
    '- 包含关系\r\n' +
    '\r\n' +
    '  有些组件无法**提前知晓它们子组件的具体内容**。在 `Sidebar`（侧边栏）和 `Dialog`（对话框）等**展现通用容器（box）的组件**中特别容易遇到这种情况。\r\n' +
    '\r\n' +
    '   功能上 类似于Vue的 slot 插槽\r\n' +
    '\r\n' +
    '  - 预定义的   **props.children** \r\n' +
    '\r\n' +
    '    特殊的 `children` prop 来将他们的子组件传递到渲染结果中，别的组件可以通过 JSX 嵌套，将任意组件作为子组件传递给它们\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - 自定义的props.xxx\r\n' +
    '  \r\n' +
    '    \r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'export default class Composition extends Component {\r\n' +
    '    render() {\r\n' +
    '        return (\r\n' +
    '            <div>\r\n' +
    '                <p>container1</p>\r\n' +
    '                {/* 通过props.children */}\r\n' +
    '                <Container1>\r\n' +
    "                    <p style={{ color: 'red' }}>我是自定义内容1</p>\r\n" +
    "                    <p style={{ color: 'red' }}>我是自定义内容2</p>\r\n" +
    '                </Container1>\r\n' +
    '                <p>container2</p>\r\n' +
    '                 {/* 通过props.xxx */}\r\n' +
    '                <Container2 right={\r\n' +
    '                    (\r\n' +
    "                        <span style={{ color: 'green' }}> 我是自定义right</span>\r\n" +
    '                    )\r\n' +
    '                }\r\n' +
    '\r\n' +
    '                    left={\r\n' +
    '                        (\r\n' +
    "                            <span style={{ color: 'red' }}> 我是自定义 left</span>\r\n" +
    '                        )\r\n' +
    '                    }\r\n' +
    '                />\r\n' +
    '            </div>\r\n' +
    '        )\r\n' +
    '    }\r\n' +
    '}\r\n' +
    '\r\n' +
    '\r\n' +
    '//通过 预定义 的 props.children 将嵌套的组件传递到Container1中 \r\n' +
    'function Container1(props) {\r\n' +
    '    const defaultContent = (\r\n' +
    "        <span style={{ color: 'blue' }}>\r\n" +
    '            我是默认内容\r\n' +
    '        </span>\r\n' +
    '    );\r\n' +
    '    return (\r\n' +
    '        <section className="container1">\r\n' +
    '            {props.children ? props.children : defaultContent}\r\n' +
    '        </section>\r\n' +
    '    )\r\n' +
    '}\r\n' +
    '\r\n' +
    '//自定义的 props \r\n' +
    'function Container2(props) {\r\n' +
    '    const defaultContent = {\r\n' +
    '        left: (\r\n' +
    "            <span style={{ color: 'blue' }}>\r\n" +
    '                我是默认内容Left\r\n' +
    '            </span>\r\n' +
    '        ),\r\n' +
    '        right: (\r\n' +
    "            <span style={{ color: 'blue' }}>\r\n" +
    '                我是默认内容Right\r\n' +
    '            </span>\r\n' +
    '        )\r\n' +
    '    }\r\n' +
    '    console.log(defaultContent);\r\n' +
    '    const { left, right } = props;\r\n' +
    '    return (\r\n' +
    '        <div className="container2">\r\n' +
    '            {\r\n' +
    '                left ? left : (\r\n' +
    '                    <section className="left">\r\n' +
    '                        {defaultContent.left}\r\n' +
    '                    </section>\r\n' +
    '                )\r\n' +
    '            }\r\n' +
    '            {\r\n' +
    '                right ? right : (\r\n' +
    '                    <section className="right">\r\n' +
    '                        {\r\n' +
    '                            defaultContent.left\r\n' +
    '                        }\r\n' +
    '                    </section>\r\n' +
    '                )\r\n' +
    '            }\r\n' +
    '        </div>\r\n' +
    '    )\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    'ps:props.children 可以是还可以是函数，**你可以将任何东西作为子元素传递给自定义组件，只要确保在该组件渲染之前能够被转换成 React 理解的对象**。这种用法并不常见，但可以用于扩展 JSX。\r\n' +
    '\r\n' +
    '- 特例关系\r\n' +
    '\r\n' +
    '在 React 中，我们也可以通过组合来实现这一点。“特殊”组件可以通过 props 定制并渲染“一般”组件：\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'function Dialog(props) {\r\n' +
    '  return (\r\n' +
    '    <FancyBorder color="blue">\r\n' +
    '      <h1 className="Dialog-title">\r\n' +
    '        {props.title}\r\n' +
    '      </h1>\r\n' +
    '      <p className="Dialog-message">\r\n' +
    '        {props.message}\r\n' +
    '      </p>\r\n' +
    '    </FancyBorder>\r\n' +
    '  );\r\n' +
    '}\r\n' +
    '\r\n' +
    'function WelcomeDialog() {\r\n' +
    '  return (\r\n' +
    '    <Dialog\r\n' +
    '      title="Welcome"\r\n' +
    '      message="Thank you for visiting our spacecraft!" />\r\n' +
    '  );\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    '**注意：组件可以接受任意 props，包括基本数据类型，React 元素以及函数。**\r\n' +
    '\r\n' +
    '### render-props\r\n' +
    '\r\n' +
    '在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术\r\n' +
    '\r\n' +
    '具有 render prop 的组件接受一个函数，**该函数返回一个 React 元素并调用它而不是实现自己的渲染逻辑。**，**可以在渲染子组件的同时 传入数据**，这一点时props.children 无法做到的\r\n' +
    '\r\n' +
    '达到**插槽**的功能\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '与 React.PureComponent 一起使用时要小心\r\n' +
    '\r\n' +
    '### Fragments\r\n' +
    '\r\n' +
    '**用于解决 不必要的 外层DOM容器**\r\n' +
    '\r\n' +
    '由于jsx **在语法层面必须包裹一个外层容器**，使用Fragments 组件包裹  并在编译后不会生成 真实的元素\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    '\r\n' +
    'class Columns extends React.Component {\r\n' +
    '  render() {\r\n' +
    '    return (\r\n' +
    '      <React.Fragment>        <td>Hello</td>\r\n' +
    '        <td>World</td>\r\n' +
    '      </React.Fragment>    );\r\n' +
    '  }\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    '`key` 是唯一可以传递给 `Fragment` 的属性。未来我们可能会添加对其他属性的支持，例如事件。\r\n' +
    '\r\n' +
    '短语法 ，类似于 一个空标签 ,**但不支持任何的属性传递**\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'class Columns extends React.Component {\r\n' +
    '  render() {\r\n' +
    '    return (\r\n' +
    '      <>\r\n' +
    '        <td>Hello</td>\r\n' +
    '        <td>World</td>\r\n' +
    '      </>    \r\n' +
    '    );\r\n' +
    '  }\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    '### Context\r\n' +
    '\r\n' +
    'Context 提供了一个无需为每层组件手动添加 props，就能在**组件树间进行数据传递**的方法。\r\n' +
    '\r\n' +
    '- 使用\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    '  1) 创建Context容器对象：\r\n' +
    '  \tconst XxxContext = React.createContext()  \r\n' +
    '  \t\r\n' +
    '  2) 渲染子组件时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：\r\n' +
    '  \t<xxxContext.Provider value={数据}>\r\n' +
    '  \t\t子组件\r\n' +
    '      </xxxContext.Provider>\r\n' +
    '      \r\n' +
    '  3) 后代组件读取数据：\r\n' +
    '  \r\n' +
    '  \t//第一种方式:仅适用于类组件 \r\n' +
    '  \t  static contextType = xxxContext  // 必须使用contextType   声明接收context\r\n' +
    '  \t  this.context // 读取context中的数据\r\n' +
    '  \t  \r\n' +
    '  \t//第二种方式: 函数组件与类组件都可以\r\n' +
    '  \t  <xxxContext.Consumer>\r\n' +
    '  \t    {\r\n' +
    '  \t      value => ( // 使用一个函数，函数的参数参数  就是context中的value数据\r\n' +
    '  \t        要显示的内容\r\n' +
    '  \t      )\r\n' +
    '  \t    }\r\n' +
    '  \t  </xxxContext.Consumer>\r\n' +
    '  ```\r\n' +
    '\r\n' +
    '- 注意\r\n' +
    '\r\n' +
    '  1. 创建的 上下文容器要在 子组件的作用域中\r\n' +
    '  2. 一般用于 实现插件\r\n' +
    '\r\n' +
    '### PureComponent\r\n' +
    '\r\n' +
    '- React.Component 类的2个问题 \r\n' +
    '\r\n' +
    '> 1. 只要执行setState(),即使不改变状态数据, 组件也会重新render()\r\n' +
    '>\r\n' +
    '> 2. 只当前组件重新render(), 就会自动重新render子组件 ==> 效率低\r\n' +
    '\r\n' +
    '效率高的做法\r\n' +
    '\r\n' +
    '>  只有当组件的state或props数据发生改变时才重新render()\r\n' +
    '\r\n' +
    '原因\r\n' +
    '\r\n' +
    '>  Component中的shouldComponentUpdate()总是返回true\r\n' +
    '\r\n' +
    '解决\r\n' +
    '\r\n' +
    '\t办法1: \r\n' +
    '\t\t重写shouldComponentUpdate(nextProps,nextSate)方法\r\n' +
    '\t\t比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false\r\n' +
    '\t办法2:  \r\n' +
    '\t\t使用PureComponent ，extends PureComponent\r\n' +
    '\t\tPureComponent定义了shouldComponentUpdate(), 只有state或props数据有变化才返回true\r\n' +
    '\t\t注意: \r\n' +
    '\t\t\t只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  \r\n' +
    '\t\t\t不要直接修改state数据, 而是要产生新数据\r\n' +
    '\t项目中一般使用PureComponent来优化\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '- React.PureComponent\r\n' +
    '\r\n' +
    '`React.PureComponent` 与 [`React.Component`](https://zh-hans.reactjs.org/docs/react-api.html#reactcomponent) 很相似。两者的区别在于 [`React.Component`](https://zh-hans.reactjs.org/docs/react-api.html#reactcomponent) 并未实现 [`shouldComponentUpdate()`](https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate)，而 `React.PureComponent` 中以浅层对比 prop 和 state 的方式来实现了该函数。\r\n' +
    '\r\n' +
    '如果赋予 React 组件相同的 props 和 state，`render()` 函数会渲染相同的内容，那么在某些情况下使用 `React.PureComponent` 可提高性能。\r\n' +
    '\r\n' +
    '此外，`React.PureComponent` 中的 `shouldComponentUpdate()` 将跳过所有子组件树的 prop 更新。因此，请确保所有子组件也都是“纯”的组件。\r\n' +
    '\r\n' +
    '**PureComponent** 的`shouldComponentUpdate 是浅比较 ，当在原有的state 上 更改，并用setState 传入的时候，会因为引用相等 直接返回false\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'export default class Parent extends Component {\r\n' +
    '    state = {\r\n' +
    '        age: 16,\r\n' +
    '    }\r\n' +
    '    changeAge = () => {\r\n' +
    '        this.setState({\r\n' +
    '            age: 18\r\n' +
    '        })\r\n' +
    '    }\r\n' +
    '    render() {\r\n' +
    "        console.log('parent render ');\r\n" +
    '        return (\r\n' +
    '            <div>\r\n' +
    '                Parent\r\n' +
    '                <Child />\r\n' +
    '                <button onClick={this.changeAge}>点击</button>\r\n' +
    '            </div>\r\n' +
    '        )\r\n' +
    '    }\r\n' +
    '}\r\n' +
    '\r\n' +
    'class Child extends PureComponent {\r\n' +
    '    render() {\r\n' +
    "        console.log('child render');\r\n" +
    '        return (\r\n' +
    '            <div>\r\n' +
    '                Child\r\n' +
    '            </div>\r\n' +
    '        )\r\n' +
    '    }\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    '##### 错误边界\r\n' +
    '\r\n' +
    '理解：\r\n' +
    '\r\n' +
    '错误边界：用来捕获后代组件错误，渲染出备用页面\r\n' +
    '\r\n' +
    '特点：\r\n' +
    '\r\n' +
    '只能捕获**后代组件 **  **生命周期产生** 的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误\r\n' +
    '\r\n' +
    '使用方式：\r\n' +
    '\r\n' +
    'getDerivedStateFromError配合componentDidCatch\r\n' +
    '\r\n' +
    '```js\r\n' +
    '// 生命周期函数，一旦后台组件报错，就会触发\r\n' +
    'static getDerivedStateFromError(error) {\r\n' +
    '    console.log(error);\r\n' +
    '    // 在render之前触发\r\n' +
    '    // 返回新的state\r\n' +
    '    return {\r\n' +
    '        hasError: true,\r\n' +
    '    };\r\n' +
    '}\r\n' +
    '\r\n' +
    'componentDidCatch(error, info) {\r\n' +
    '    // 统计页面的错误。发送请求发送到后台去\r\n' +
    '    console.log(error, info);\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '##### 组件通信方式总结\r\n' +
    '\r\n' +
    '- 方式：\r\n' +
    '\r\n' +
    '\t\tprops：\r\n' +
    '\t\t\t(1).children props\r\n' +
    '\t\t\t(2).render props\r\n' +
    '\t\t消息订阅-发布：\r\n' +
    '\t\t\tpubs-sub、event等等\r\n' +
    '\t\t集中式管理：\r\n' +
    '\t\t\tredux、dva等等\r\n' +
    '\t\tconText:\r\n' +
    '\t\t\t生产者-消费者模式\r\n' +
    '\r\n' +
    '-  组件间的关系\r\n' +
    '\r\n' +
    '\t\t父子组件：props\r\n' +
    '\t\t兄弟组件(非嵌套组件)：消息订阅-发布、集中式管理\r\n' +
    '\t\t祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(用的少)\r\n' +
    '\r\n' +
    '## HOOKS\r\n' +
    '\r\n' +
    '技术胖 \r\n' +
    '\r\n' +
    '可以让你在**不编写 class 的情况下使用 state 以及其他的 React 特性。**\r\n' +
    '\r\n' +
    '逻辑复用\r\n' +
    '\r\n' +
    '### useState\r\n' +
    '\r\n' +
    'React 会在重复渲染时记住它当前的值（缓存啊），并且提供最新的值给我们的函数。\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    "import React,{useState} from 'react'\r\n" +
    '\r\n' +
    'export default function Example() {\r\n' +
    '    //声明一个state 变量     传入初始state\r\n' +
    '    const [count,setCount]=useState(0);//数组解构\r\n' +
    '    //多状态  声明\r\n' +
    '    const [age,setAge]=useState(18);\r\n' +
    "    const [sex,setSex]=useState('nan');\r\n" +
    "    const [job,setJob]=useState('前端程序员');\r\n" +
    '    //\r\n' +
    '    return (\r\n' +
    '        <div>\r\n' +
    '            {\r\n' +
    '                //使用 State\r\n' +
    '            }\r\n' +
    '            <p>You clicked {count} times</p>\r\n' +
    '            <button onClick={()=>setCount(count+1)}>click</button>\r\n' +
    '            {\r\n' +
    '                /*更新  State\r\n' +
    '                用户点击按钮后，我们传递一个新的值给 setCount。React 会重新渲染 Example 组件，并把最新的 count 传给它 */\r\n' +
    '            }\r\n' +
    '            <p>年龄{age}</p>\r\n' +
    '            <p>性别{sex}</p>\r\n' +
    '            <p>工作{job}</p>\r\n' +
    '        </div>\r\n' +
    '    )\r\n' +
    '}\r\n' +
    '(3). useState()说明:\r\n' +
    '        参数: 第一次初始化指定的值在内部作缓存\r\n' +
    '        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数\r\n' +
    '(4). setXxx()2种写法:\r\n' +
    '        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值\r\n' +
    '        setXxx(value => newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值\r\n' +
    '```\r\n' +
    '\r\n' +
    '注意：\r\n' +
    '\r\n' +
    '顺序 声明，useState 的声明 **不能存在于条件判断语句中**\r\n' +
    '\r\n' +
    '**不像 class 中的 `this.setState`，更新 state 变量总是*替换*它而不是合并它。**\r\n' +
    '\r\n' +
    '### useEffect\r\n' +
    '\r\n' +
    '*Effect Hook* 可以让你在函数组件中执行副作用操作\r\n' +
    '\r\n' +
    '通过使用这个 Hook，你可以告诉 React 组件需要在渲染后执行某些操作。React 会保存你传递的函数（我们将它称之为 “effect”），并且**在执行 DOM 更新之后调用它。** \r\n' +
    '\r\n' +
    '(1). Effect Hook 可以让你在函数组件中执行**副作用操作**(用于模拟类组件中的**生命周期钩子**)\r\n' +
    '(2). React中的副作用操作:\r\n' +
    '        发ajax请求数据获取\r\n' +
    '        设置订阅 / 启动定时器\r\n' +
    '        手动更改真实DOM\r\n' +
    '(3). 语法和说明: \r\n' +
    '\r\n' +
    '       ```jsx\r\n' +
    ' useEffect(() => { \r\n' +
    '          // 在此可以执行任何带副作用操作\r\n' +
    '          return () => { // 在组件卸载前执行 ---componentWillUnmount\r\n' +
    '            // 在此做一些收尾工作, 比如清除定时器/取消订阅等\r\n' +
    '          }\r\n' +
    '        }, [stateValue]) \r\n' +
    '// 1. 如果指定的是[], 回调函数只会在第一次render()执行， 不监听 任何---componentDidMount\r\n' +
    '//2.\t没有传递 第二个参数  监听 所有状态的变化 ---componentDidUpdate\r\n' +
    '//3. 传入的副作用函数 返回的函数 相当于 ---componentWillUnmount\r\n' +
    '\r\n' +
    '       ```\r\n' +
    '    \r\n' +
    '       ```\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '(4). 可以把 useEffect Hook 看做如下三个函数的组合\r\n' +
    '        componentDidMount()\r\n' +
    '        componentDidUpdate()\r\n' +
    '    \tcomponentWillUnmount() \r\n' +
    '\r\n' +
    'useEffect 的函数是异步调用的，会等待浏览器完成画面渲染之后才会延迟调用 `useEffect`\r\n' +
    '\r\n' +
    '### useRef\r\n' +
    '\r\n' +
    '- 绑定dom 元素引用\r\n' +
    '\r\n' +
    '相当于在类式组件中调用createRef  用法一致\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'export default function useRefExample() {\r\n' +
    '    const refA = useRef();\r\n' +
    '\r\n' +
    '    let refB = null;\r\n' +
    '    function log() {\r\n' +
    '        console.log(refA);\r\n' +
    '    }\r\n' +
    '    return (\r\n' +
    '        <div>\r\n' +
    '            {/* <A ref={(e)=>e}/> */}\r\n' +
    '            <input type="text" ref={refA} />\r\n' +
    '            <button onClick={log}>点击</button>\r\n' +
    '        </div>\r\n' +
    '    )\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    '**函数式组件不能赋值给 ref** \r\n' +
    '\r\n' +
    '- 保存变量\r\n' +
    '\r\n' +
    '### useContext\r\n' +
    '\r\n' +
    '在组件树上 进行数据通信\r\n' +
    '\r\n' +
    '相当于 class 组件中的 `static contextType = MyContext` 或者 `<MyContext.Consumer>`\r\n' +
    '\r\n' +
    '`useContext(MyContext)` 只是让你能够*读取* context 的值以及订阅 context 的变化。你仍然需要在上层组件树中使用 `<MyContext.Provider>` 来为组件树上的下层组件*提供* context。\r\n' +
    '\r\n' +
    '### useMemo\r\n' +
    '\r\n' +
    '`useMemo`主要用来解决使用React hooks产生的无用渲染的性能问题。使用function的形式来声明组件，**失去了`shouldCompnentUpdate`（在组件更新之前）这个生命周期，也就是说我们没有办法通过组件更新前条件来决定组件是否更新**\r\n' +
    '\r\n' +
    '`useMemo`和`useCallback`都是解决上述性能问题的\r\n' +
    '\r\n' +
    '它仅会在某个依赖项改变时**才重新计算 memoized 值**,进行缓存（类似于 Vue的计算属性computed）\r\n' +
    '\r\n' +
    '**配合React.Memo API进行使用，避免子组件 不必要的重新渲染**\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\r\n' +
    '\r\n' +
    'export default function useMemoExample() {\r\n' +
    "    const [name, setName] = useState('zhangsan');\r\n" +
    '    const [age, setAge] = useState(18);\r\n' +
    '    const [levels, setLevel] = useState([\r\n' +
    '        {\r\n' +
    "            name: 'level1',\r\n" +
    "            color: 'blue'\r\n" +
    '        },\r\n' +
    '        {\r\n' +
    "            name: 'level2',\r\n" +
    "            color: 'white'\r\n" +
    '        },\r\n' +
    '        {\r\n' +
    "            name: 'level3',\r\n" +
    "            color: 'pink'\r\n" +
    '        }\r\n' +
    '    ])\r\n' +
    '    function addAge() {\r\n' +
    '        setAge(age + 1);\r\n' +
    '    }\r\n' +
    '    function addLevel() {\r\n' +
    "        setLevel([...levels, { name: 'level4', color: 'red' }])\r\n" +
    '    }\r\n' +
    '    //不适用memo 的话这个 函数在age 更新的时候会被重复调用\r\n' +
    '    function getIntro() {\r\n' +
    "        console.log('getIntro');\r\n" +
    "        return 'My name is' + name;\r\n" +
    '    }\r\n' +
    '    function getColors() {\r\n' +
    "        console.log('get colors');\r\n" +
    '        return levels.map(item => item.color);\r\n' +
    '    }\r\n' +
    '    // const intro = getIntro();\r\n' +
    '    //使用useMemo 只会在依赖变化的时候 重新计算\r\n' +
    '    const intro = useMemo(() => {\r\n' +
    "        console.log('get in memo ');\r\n" +
    "        return 'My name is ' + name\r\n" +
    '    }, [name]);\r\n' +
    '    const colors = useMemo(() => {\r\n' +
    "        console.log('get colors');\r\n" +
    '        return levels.map(item => item.color);\r\n' +
    '    }, [levels]);\r\n' +
    '    return (\r\n' +
    '        <div>\r\n' +
    '            <p>{intro}</p>\r\n' +
    '            <p>年龄：{age}</p>\r\n' +
    '            <button onClick={addAge}>add age</button>\r\n' +
    '            <button onClick={addLevel}>add level</button>\r\n' +
    '            <p>{colors}</p>\r\n' +
    '        </div>\r\n' +
    '    )\r\n' +
    '}\r\n' +
    '\r\n' +
    '```\r\n' +
    '\r\n' +
    '### useCallback\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'const memoizedCallback = useCallback(\r\n' +
    '  () => {\r\n' +
    '    doSomething(a, b);\r\n' +
    '  },\r\n' +
    '  [a, b],\r\n' +
    ');\r\n' +
    '\r\n' +
    '```\r\n' +
    '\r\n' +
    '返回一个 [memoized](https://en.wikipedia.org/wiki/Memoization) 回调函数。\r\n' +
    '\r\n' +
    '把内联回调函数及依赖项数组作为参数传入 `useCallback`，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 `shouldComponentUpdate`）的子组件时，它将非常有用\r\n' +
    '\r\n' +
    '`useCallback(fn, deps)` 相当于 `useMemo(() => fn, deps)`。\r\n' +
    '\r\n' +
    '使用场景是：有一个父组件，其中包含子组件，子组件接收一个函数作为props；通常而言，如果父组件更新了，子组件也会执行更新；但是大多数场景下，更新是没有必要的，我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件；这样，子组件就能避免不必要的更新。\r\n' +
    '\r\n' +
    '`React.memo` 和 `React.useCallback` 一定记得需要配对使用，缺了一个都可能导致性能不升反“降”，毕竟无意义的浅比较也是要消耗那么一点点点的性能。\r\n' +
    '\r\n' +
    '### 自定义hooks\r\n' +
    '\r\n' +
    '使用以上的hooks 封装 抽离编写功能，自定义hook 必须以use开头（为了区分组件和自定义hook）\r\n' +
    '\r\n' +
    '```jsx\r\n' +
    'export function useWindowSize() {\r\n' +
    '    const [size, setSize] = useState({\r\n' +
    '        width: document.documentElement.clientWidth,\r\n' +
    '        height: document.documentElement.clientHeight,\r\n' +
    '    });\r\n' +
    '    //缓存 函数\r\n' +
    '    const resizeHandler = () => {\r\n' +
    "        // console.log('resize');\r\n" +
    '        setSize({\r\n' +
    '            width: document.documentElement.clientWidth,\r\n' +
    '            height: document.documentElement.clientHeight,\r\n' +
    '        });\r\n' +
    '    };\r\n' +
    '    useEffect(() => {\r\n' +
    "        window.addEventListener('resize', resizeHandler);\r\n" +
    '        return () => {\r\n' +
    "            window.removeEventListener('resize', resizeHandler);\r\n" +
    '        }; //取消事件监听\r\n' +
    '    }, []); //只调用一次\r\n' +
    '    return size;\r\n' +
    '}\r\n' +
    '\r\n' +
    'export function useMousePosition() {\r\n' +
    '    const [position, setPosition] = useState({\r\n' +
    '        pageX: 0,\r\n' +
    '        pageY: 0,\r\n' +
    '    });\r\n' +
    '    const mousemoveHandler = (event) => {\r\n' +
    '        setPosition({\r\n' +
    '            pageX: event.pageX,\r\n' +
    '            pageY: event.pageY,\r\n' +
    '        });\r\n' +
    '    };\r\n' +
    '    useEffect(() => {\r\n' +
    "        window.addEventListener('mousemove', mousemoveHandler);\r\n" +
    '        return () => {\r\n' +
    "            window.removeEventListener('mousemove', mousemoveHandler);\r\n" +
    '        };\r\n' +
    '    },[]);\r\n' +
    '    return position;\r\n' +
    '}\r\n' +
    '```\r\n' +
    '\r\n' +
    '## 路由\r\n' +
    '\r\n' +
    '### 工作原理\r\n' +
    '\r\n' +
    '### react-router（-dom）\r\n' +
    '\r\n' +
    'web、native、anywhere\r\n' +
    '\r\n' +
    '- 基础使用\r\n' +
    '\r\n' +
    '  - 路由链接的编写\r\n' +
    '\r\n' +
    '    ```jsx\r\n' +
    '     <Link className="list-group-item" to="/home">Home</Link>\r\n' +
    '     <Link className="list-group-item" to="/about">About</Link>\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '  - 路由注册\r\n' +
    '\r\n' +
    '    ```jsx\r\n' +
    '    <Route path="/about" component={About}/>\r\n' +
    '    <Route path="/home" component={Home}/>\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '  - 使用 某种 Router（Router ，BrowserRouter或者HashRouter） 包裹在最外层\r\n' +
    '\r\n' +
    '  - \r\n' +
    '\r\n' +
    '- 路由组件和一般组件\r\n' +
    '\r\n' +
    '  - 路由组件\r\n' +
    '\r\n' +
    '    通过路径匹配 由路由器渲染\r\n' +
    '\r\n' +
    '    路由器会给 该组件 传递参数（{history:{},location:{},match:{}}）**到 props** \r\n' +
    '\r\n' +
    '    <img src="https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/image-20210123222752496.png" alt="image-20210123222752496" style="zoom:67%;" />\r\n' +
    '\r\n' +
    '  - 一般组件\r\n' +
    '\r\n' +
    '  \r\n' +
    '\r\n' +
    '- API\r\n' +
    '\r\n' +
    '  - Link 组件\r\n' +
    '  \r\n' +
    '    渲染 为a 标签\r\n' +
    '  \r\n' +
    '  - NavLink 组件\r\n' +
    '  \r\n' +
    '    特殊的 Link\r\n' +
    '  \r\n' +
    '    activeClassName 属性可以添加 当前组件链接 渲染的元素添加一个类名，默认“active”\r\n' +
    '    \r\n' +
    '  - Route 组件\r\n' +
    '  \r\n' +
    '    它最基本的职责是在 location 与 Route 的 path 匹配时呈现一些 UI。\r\n' +
    '  \r\n' +
    '    用于注册逐渐\r\n' +
    '  \r\n' +
    '  - **Switch 组件**\r\n' +
    '  \r\n' +
    '   在多个Route 外层 再包裹一层Switch ，匹配 **唯一**的组件， path 合component 一一对应  ，**提升效率**，性能\r\n' +
    '  \r\n' +
    '  单个之外也有必要包裹一个\r\n' +
    '  \r\n' +
    '  渲染与该地址匹配的**第一个子节**点 `<Route>` 或者 `<Redirect>`\r\n' +
    '  \r\n' +
    '  - Redirect 组件\r\n' +
    '  \r\n' +
    '    渲染 `<Redirect>` 将使导航到一个新的地址。这个新的地址会覆盖 history 栈中的当前地址，类似服务器端的重定向，默认路由\r\n' +
    '  \r\n' +
    '    to 属性 指定默认path\r\n' +
    '  \r\n' +
    '  - \r\n' +
    '\r\n' +
    '- 样式丢失问题\r\n' +
    '\r\n' +
    'path 设置为 多级路径，导致css的资源加载路径 错误\r\n' +
    '\r\n' +
    '1. 去掉 . 使用 /css/xxx\r\n' +
    '2. 使用%PUBLIC_URL%/css/xxx.css\r\n' +
    '3. 使用HashRouter  （路径出现在hash 部分，不对浏览器的行为进行影响）\r\n' +
    '\r\n' +
    '- 模糊匹配合严格匹配\r\n' +
    '\r\n' +
    '  Route 默认 模糊匹配，顺序必须一致\r\n' +
    '\r\n' +
    '  设置Route 的exact 属性为true 开启严格匹配\r\n' +
    '\r\n' +
    '- 嵌套路由\r\n' +
    '\r\n' +
    '  to 属性必须包含父组件的路径\r\n' +
    '\r\n' +
    '  此时不能开启严格匹配 否则不能匹配到嵌套路由\r\n' +
    '\r\n' +
    '- 给路由组件传参\r\n' +
    '\r\n' +
    '  根据路由链接的编写 （to 属性），和路由注册（path 属性）来传递参数 ，并在组件中使用\r\n' +
    '\r\n' +
    '  - params \r\n' +
    '\r\n' +
    '    /xxx?a=66\r\n' +
    '\r\n' +
    '    xxx 即为 params 参数\r\n' +
    '\r\n' +
    '    - 传递\r\n' +
    '    - 声明接收\r\n' +
    '    - 注入到 组件props\r\n' +
    '\r\n' +
    '    ```jsx\r\n' +
    '      <ul>\r\n' +
    '                    {newsList.map(({ id, title }, index) => {\r\n' +
    '                        return (\r\n' +
    '                            <li key={id}>\r\n' +
    '    {/* 向路由组件 传递 params 参数 */}\r\n' +
    '                                <Link to={`/home/message/detail/${index + 1}`}>{title}</Link>\r\n' +
    '                            </li>\r\n' +
    '                        )\r\n' +
    '                    })}\r\n' +
    '                </ul>\r\n' +
    '                <div className="content">\r\n' +
    '    {/* 接收 params 参数 */}\r\n' +
    '                    <Route path="/home/message/detail/:id" component={Detail}/>\r\n' +
    '                </div>\r\n' +
    '    \r\n' +
    '    \r\n' +
    '    //在路由组件中 通过props.match.params 取出参数 \r\n' +
    '     console.log(props);\r\n' +
    '     const {id}=props.match.params;\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - search参数  (Vue 或其他地方中也叫**query 参数**，React 用search 来标识)\r\n' +
    '\r\n' +
    '    /xxx?a=66&b=77\r\n' +
    '\r\n' +
    '    ?a=66&b=77 即为 search参数\r\n' +
    '\r\n' +
    '     \r\n' +
    '\r\n' +
    '    - 传递 ?a=66&b=77\r\n' +
    '\r\n' +
    '    - 声明接收（无需 特别声明，可直接在 props 属性中使用）\r\n' +
    '\r\n' +
    '    - 从props 使用\r\n' +
    '\r\n' +
    '      props.location.search 为字符串 urlencoded 格式，需要自己转换为对象，使用querystring 库 转化\r\n' +
    '\r\n' +
    '      qs.parse(*props*.location.search.slice(1))\r\n' +
    '\r\n' +
    '  - state 参数\r\n' +
    '\r\n' +
    '    和组件state 没有关系\r\n' +
    '\r\n' +
    '    - 传递\r\n' +
    '\r\n' +
    '      路由导航组件 的to 属性 设置为对象\r\n' +
    '\r\n' +
    '      <img src="https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/image-20210130231157824.png" alt="image-20210130231157824" style="zoom:67%;" />\r\n' +
    '\r\n' +
    '      ```jsx\r\n' +
    '      <Link to={{\r\n' +
    "                 pathname:'/home/message/detail',\r\n" +
    '                 state:{\r\n' +
    '                 id:1,\r\n' +
    "                 title:'001'\r\n" +
    '                 }\r\n' +
    '                 }}>{title}</Link>\r\n' +
    '      ```\r\n' +
    '\r\n' +
    '      \r\n' +
    '\r\n' +
    '    - 接收（不用声明接收）\r\n' +
    '\r\n' +
    '    - 使用\r\n' +
    '\r\n' +
    '      props.location.state \r\n' +
    '\r\n' +
    '    state 参数不会暴露在 地址栏、\r\n' +
    '\r\n' +
    '    由于记录在history 中（前提是BrowserRouter ）,刷新不会消失，但是强制刷新或者清除缓存 会呗清空\r\n' +
    '\r\n' +
    '  - 总结\r\n' +
    '  \r\n' +
    '- push 和replace\r\n' +
    '\r\n' +
    '  默认的路由跳转为push 模式\r\n' +
    '\r\n' +
    '  设置**replace ={true}** 开启replace 模式，无法回退\r\n' +
    '\r\n' +
    '- 编程式的路由导航\r\n' +
    '\r\n' +
    '  **props.history** 上有多种方法，可以用于跳转\r\n' +
    '\r\n' +
    '![image-20210131144221878](https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/image-20210131144221878.png)\r\n' +
    '\r\n' +
    '调用同时 可以传递prasm、search、state 参数\r\n' +
    '\r\n' +
    '- withRouter 的使用\r\n' +
    '\r\n' +
    '在非路由组件中 使用路由的API\r\n' +
    '\r\n' +
    '一个方法，传入 组件，在props 上注入路由API\r\n' +
    '\r\n' +
    '- BrowserRouter 与HashRouter\r\n' +
    '\r\n' +
    '  ![image-20210131151441099](https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/image-20210131151441099.png)\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '### 组件库 \r\n' +
    '\r\n' +
    'antd  React 最常用的组件库\r\n' +
    '\r\n' +
    '- 基础使用\r\n' +
    '\r\n' +
    '  组件、icon 引入\r\n' +
    '\r\n' +
    '- **按需引入**\r\n' +
    '\r\n' +
    '  和vue-cli 下按需引入Element/antd-v的 方式一致\r\n' +
    '\r\n' +
    '  会在引入组件的同时引入样式\r\n' +
    '\r\n' +
    '  - 安装 babel-plugin-import \r\n' +
    '\r\n' +
    '  - 创建babel.config.js 文件 进行配置\r\n' +
    '\r\n' +
    '    ```js\r\n' +
    '    module.exports = {\r\n' +
    '        plugins: [\r\n' +
    '            [\r\n' +
    "                'import', //按需加载 ant design\r\n" +
    "                { libraryName: 'antd', libraryDirectory: 'es', style: 'css' },\r\n" +
    '                //设置为true 会报错，需要另外开启 js 把less 转化为内  css，这里直接使用css 简单设置\r\n' +
    '            ],\r\n' +
    '        ],\r\n' +
    '    };\r\n' +
    '    \r\n' +
    '    ```\r\n' +
    '\r\n' +
    '    这种简易配置 生效的前提是 **使用了 run eject 暴露出webpack 的配置**\r\n' +
    '\r\n' +
    '## redux\r\n' +
    '\r\n' +
    '状态共享 和管理\r\n' +
    '\r\n' +
    '可以用于react、Vue 等 框架\r\n' +
    '\r\n' +
    '<img src="react.assets/redux%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="redux原理图" style="zoom: 50%;" />\r\n' +
    '\r\n' +
    '### 三个核心概念\r\n' +
    '\r\n' +
    '#### action\r\n' +
    '\r\n' +
    '- 变更动作对象\r\n' +
    '\r\n' +
    '- 对象型 -同步action \r\n' +
    '\r\n' +
    '  包含两个属性\r\n' +
    '\r\n' +
    '  - type：变更类型 、唯一、字符串、必须\r\n' +
    '  - data:变更数据\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '- 函数型-异步action\r\n' +
    '\r\n' +
    '#### reducer\r\n' +
    '\r\n' +
    '- 用于初始化、加功状态\r\n' +
    '- 加工时，根据旧状态 和action 产生新的状态，**纯函数**\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '#### store\r\n' +
    '\r\n' +
    '- 将state、action、reducer 联系在一起、统一调度者\r\n' +
    '- 使用\r\n' +
    '\r\n' +
    '- API\r\n' +
    '  - getState \r\n' +
    '  - subscribe\r\n' +
    '\r\n' +
    'reducer 相当于Vue 中的mutation，\r\n' +
    '\r\n' +
    'action和Vue 的一致\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '### redux 基础（纯redux）\r\n' +
    '\r\n' +
    '- 定义 reducer - 根据 传入的 action 改变状态  ，**纯函数**\r\n' +
    '- 根据reducer 创建store\r\n' +
    '- 定义action  ，\r\n' +
    '- 在组件引入store  使用**dispatch** 分发不同类型的更改\r\n' +
    '\r\n' +
    '见文件夹 redux1-redux2\r\n' +
    '\r\n' +
    '### redux-thunk （异步action 中间件）\r\n' +
    '\r\n' +
    '添加 中间件 ，打开 store 异步action 功能\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '### **react-redux 库（FaceBook 官方出品）**\r\n' +
    '\r\n' +
    '<img src="https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/react-redux%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" alt="react-redux模型图" style="zoom:50%;" />\r\n' +
    '\r\n' +
    '\r\n' +
    '\r\n' +
    '- 链接容器组件和 UI 组件\r\n' +
    '\r\n' +
    '  容器组件*Demo*.jsx 中\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    '  //Number 的容器组件\r\n' +
    '  //引入 Number 的UI 组件\r\n' +
    "  import NumberUI from '../views/Redux/Demo3';\r\n" +
    '  //引入connect 用于 链接UI 组件和 redux\r\n' +
    "  import {connect} from 'react-redux'\r\n" +
    '  \r\n' +
    '  //导出 容器组件\r\n' +
    '  export default connect()(NumberUI);\r\n' +
    '  ```\r\n' +
    '\r\n' +
    '  在使用了Demo 组件的 组件中（index.jsx） 通过props 传递store\r\n' +
    '\r\n' +
    '  ```jsx\r\n' +
    "  import React from 'react'\r\n" +
    "  // import Demo from './Demo3';\r\n" +
    '  \r\n' +
    '  //引入容器组件\r\n' +
    "  import DemoC from '../../containers/Demo'\r\n" +
    '  //引入store \r\n' +
    "  import store from '../../redux3/store';\r\n" +
    '  export default function index() {\r\n' +
    '      return (\r\n' +
    '          <div>\r\n' +
    '              {/* 通过标签  属性传递 store */}\r\n' +
    '              <DemoC  store={store}/>\r\n' +
    '          </div>\r\n' +
    '      )\r\n' +
    '  }\r\n' +
    '  \r\n' +
    '  ```\r\n' +
    '\r\n' +
    '- 基础使用\r\n' +
    '\r\n' +
    '  - 创建 容器组件\r\n' +
    '\r\n' +
    '    ```jsx\r\n' +
    '    export default connect(mapStateToProps, mapDispatchToProps)(DemoUI);\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '    - mapStateToProps:(state)=>{} ；将返回的 \r\n' +
    '\r\n' +
    '    - mapDispatchToProps：\r\n' +
    '\r\n' +
    '    可以是一个函数，返回的对象的每个属性为一个函数，**函数分发action** ，\r\n' +
    '\r\n' +
    '    或者是一个 对象， **每个属性为一个action构造器**（react-redux 会自动分发）\r\n' +
    '\r\n' +
    '    **不传的话 会给UI组件 传递一个dispatch 的props**\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - UI组件中通过props  调用容器组件传递的方法，改变状态\r\n' +
    '\r\n' +
    '  - Provider 的使用\r\n' +
    '\r\n' +
    '    自动给 容器组件传递 store\r\n' +
    '\r\n' +
    '    原理上 是 结合React 自己的**Context API** 和redux 封装的组件\r\n' +
    '\r\n' +
    '  - react-redux 的优化\r\n' +
    '\r\n' +
    '    ```\r\n' +
    '    (1).容器组件和UI组件整合一个文件\r\n' +
    '    \t\t(2).无需自己给容器组件传递store，给<App/>包裹一个<Provider store={store}>即可。\r\n' +
    '    \t\t(3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。\r\n' +
    '    \t\t(4).mapDispatchToProps也可以简单的写成一个对象 \r\n' +
    '    \t\t(5).一个组件要和redux“打交道”要经过哪几步？\r\n' +
    '    \t\t\t\t\t\t(1).定义好UI组件---不暴露\r\n' +
    '    \t\t\t\t\t\t(2).引入connect生成一个容器组件，并暴露，写法如下：\r\n' +
    '    \t\t\t\t\t\t\t\tconnect(\r\n' +
    '    \t\t\t\t\t\t\t\t\tstate => ({key:value}), //映射状态\r\n' +
    '    \t\t\t\t\t\t\t\t\t{key:xxxxxAction} //映射操作状态的方法\r\n' +
    '    \t\t\t\t\t\t\t\t)(UI组件)\r\n' +
    '    \t\t\t\t\t\t(4).在UI组件中通过this.props.xxxxxxx读取和操作状态\r\n' +
    '    ```\r\n' +
    '\r\n' +
    '    \r\n' +
    '\r\n' +
    '  - **最终版** **finally 项目使用**\r\n' +
    '\r\n' +
    '    1. 不同的状态定义不同的 reducer,异步action creater\r\n' +
    '\r\n' +
    '       ![image-20210204123952806](https://cdn.jsdelivr.net/gh/Galileo01/imgCloud@master/image-20210204123952806.png)\r\n' +
    '\r\n' +
    '    2. 在store.js 中合并\r\n' +
    '\r\n' +
    '       统一导入  ，创建store 时 需要使用 combineReducers 合并，\r\n' +
    '\r\n' +
    '       combineReducers 的参数 ：键为统一状态的键，值为 对应的 reducer\r\n' +
    '\r\n' +
    '       合并之后 是一个 **状态对象**，不再是单独的值\r\n' +
    '\r\n' +
    '       ```jsx\r\n' +
    "       import { createStore, applyMiddleware, combineReducers } from 'redux';\r\n" +
    "       import thunk from 'redux-thunk';\r\n" +
    "       import number_reducer from './reducers/number';\r\n" +
    "       import person_reducer from './reducers/person';\r\n" +
    '       //创建store\r\n' +
    '       \r\n' +
    '       //添加 异步action 的中间件\r\n' +
    '       \r\n' +
    '       //多个状态 需要合并\r\n' +
    '       \r\n' +
    '       //combineReducers（state） 传入的对象就是  交给store 管理的状态, \r\n' +
    '       // 每个键的值是一个reducer  \r\n' +
    '       export default createStore(\r\n' +
    '           combineReducers({\r\n' +
    '               number: number_reducer,\r\n' +
    '               personList: person_reducer,\r\n' +
    '           }),\r\n' +
    '           applyMiddleware(thunk)\r\n' +
    '       );\r\n' +
    '       ```\r\n' +
    '\r\n' +
    '       \r\n' +
    '\r\n' +
    '    3. 导出容器组件\r\n' +
    '\r\n' +
    '       UI 组件导出时 用connect 包裹，注意三个参数\r\n' +
    '\r\n' +
    '       ```jsx\r\n' +
    '       export default connect(state => state)(Person);\r\n' +
    '       //不传第二个参数 组件 会接收 dispatch 函数的props\r\n' +
    '     ```\r\n' +
    '  \r\n' +
    '     或者 使用hooks\r\n' +
    '  \r\n' +
    '       - useSelector\r\n' +
    '  \r\n' +
    '         传递一个函数，从store 中取状态，作用和 connect API 的mapState 参数一致\r\n' +
    '  \r\n' +
    '         ```jsx\r\n' +
    "         import React from 'react'\r\n" +
    "         import { useSelector } from 'react-redux'\r\n" +
    '         \r\n' +
    '         export const CounterComponent = () => {\r\n' +
    '           const counter = useSelector(state => state.counter)\r\n' +
    '           return <div>{counter}</div>\r\n' +
    '         }\r\n' +
    '         ```\r\n' +
    '  \r\n' +
    '       - useDispatch\r\n' +
    '  \r\n' +
    '         获得dispatch 方法 的引用\r\n' +
    '  \r\n' +
    '    4. 在APP 中 使用 Provider 统一绑定store\r\n' +
    '  \r\n' +
    '       让所有的容器组件 都能接收到store\r\n' +
    '  \r\n' +
    '       ```jsx\r\n' +
    "       import { Provider } from 'react-redux';\r\n" +
    '       \r\n' +
    '       ....\r\n' +
    '       <div>\r\n' +
    '                   {/* 通过标签  属性传递 store */}\r\n' +
    '                   <Provider store={store}>\r\n' +
    '                     <Demo age={18}/>\r\n' +
    '                       <Person />\r\n' +
    '                 </Provider>\r\n' +
    '               </div>\r\n' +
    '       ```\r\n' +
    '  \r\n' +
    '    \r\n' +
    '  \r\n' +
    '  - reducer 纯函数\r\n' +
    '  \r\n' +
    '    reducer **需要返回一个新的状态对象**，否则redux 会对比 新旧状态（**复杂类型 直接比较引用**），相等就不会更新页面\r\n' +
    '  \r\n' +
    '    纯函数:\r\n' +
    '    \r\n' +
    '    不得改写参数\r\n' +
    '- 开发者工具\r\n' +
    '\r\n' +
    '​    安装 chrome 扩展\r\n' +
    '\r\n' +
    '​\t安装 redux-devtools-extension\r\n' +
    '\r\n' +
    '   - npm run build \r\n' +
    '\r\n' +
    '     配置 package.json 中的 "homepage":"./” 否则 会报错\r\n' +
    '\r\n' +
    '​    \r\n' +
    '\r\n' +
    '​    \r\n' +
    '\r\n' +
    '​    \r\n' +
    '\r\n' +
    "' \n" +
    '         )\n' +
    '         '
}
[2021-02-21T12:38:10.624] [ERROR] default - POST /post/add  500  589 ms
[2021-02-21T15:48:09.853] [ERROR] default - GET /post/quert?title=%E5%8A%A0%E5%85%A5  404  4 ms
[2021-02-21T15:48:16.966] [ERROR] default - ReferenceError: all is not defined
    at E:\Web-Prpjects\react_blog\backend\router\post.js:38:18
    at Layer.handle [as handle_request] (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\layer.js:95:5)
    at next (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\layer.js:95:5)
    at E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:335:12)
    at next (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:174:3)
    at router (E:\Web-Prpjects\react_blog\backend\node_modules\express\lib\router\index.js:47:12)
[2021-02-21T15:48:16.971] [ERROR] default - GET /post/query?title=%E5%8A%A0%E5%85%A5  500  5 ms
[2021-02-21T15:48:57.693] [INFO] default - 获取连接
[2021-02-21T15:48:57.706] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'LIKE "%加入%"and type=undefined' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Handshake.onConnect (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:64:7)
    at Handshake.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Handshake._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Handshake.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Handshake.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'LIKE "%加入%"and type=undefined' at line 3`,
  sqlState: '42000',
  index: 0,
  sql: '\n' +
    '        SELECT *\n' +
    '        FROM post\n' +
    '        title LIKE "%加入%"and type=undefined \n' +
    '        '
}
[2021-02-21T15:48:57.719] [ERROR] default - GET /post/query?title=%E5%8A%A0%E5%85%A5  500  48 ms
[2021-02-21T15:49:22.637] [INFO] default - 获取连接
[2021-02-21T15:49:22.639] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'LIKE "%加入%"' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'LIKE "%加入%"' at line 3`,
  sqlState: '42000',
  index: 0,
  sql: '\n        SELECT *\n        FROM post\n        title LIKE "%加入%" \n        '
}
[2021-02-21T15:49:22.666] [ERROR] default - GET /post/query?title=%E5%8A%A0%E5%85%A5&type=all  500  29 ms
[2021-02-21T15:49:58.471] [INFO] default - 获取连接
[2021-02-21T15:49:58.481] [INFO] default - GET /post/query?title=%E5%8A%A0%E5%85%A5&type=all  200  28 ms
[2021-02-21T15:50:23.552] [INFO] default - 获取连接
[2021-02-21T15:50:23.555] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and type=1' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and type=1' at line 3",
  sqlState: '42000',
  index: 0,
  sql: '\n        SELECT *\n        FROM post\n        and type=1 \n        '
}
[2021-02-21T15:50:23.579] [ERROR] default - GET /post/query?type=1  500  28 ms
[2021-02-21T15:55:28.867] [INFO] default - 获取连接
[2021-02-21T15:55:28.871] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '=1' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Handshake.onConnect (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:64:7)
    at Handshake.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Handshake._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Handshake.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Handshake.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '=1' at line 3",
  sqlState: '42000',
  index: 0,
  sql: '\n        SELECT *\n        FROM post\n        type=1 \n        '
}
[2021-02-21T15:55:28.899] [ERROR] default - GET /post/query?type=1  500  51 ms
[2021-02-21T15:56:24.246] [INFO] default - 获取连接
[2021-02-21T15:56:24.253] [INFO] default - GET /post/query?type=1  200  29 ms
[2021-02-21T15:56:28.821] [INFO] default - 获取连接
[2021-02-21T15:56:28.825] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'undefined' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'undefined' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '        SELECT *\n' +
    '        FROM post\n' +
    '        where title LIKE "%加入%" and type=undefined \n' +
    '        '
}
[2021-02-21T15:56:28.855] [ERROR] default - GET /post/query?title=%E5%8A%A0%E5%85%A5  500  34 ms
[2021-02-21T15:56:42.710] [INFO] default - 获取连接
[2021-02-21T15:56:42.712] [INFO] default - GET /post/query?title=%E5%8A%A0%E5%85%A5&type=1  200  2 ms
[2021-02-21T15:56:50.483] [INFO] default - 获取连接
[2021-02-21T15:56:50.487] [WARN] default - GET /post/query?title=%E5%8A%A0%E5%85%A5&type=all  304  4 ms
[2021-02-21T15:56:58.186] [INFO] default - 获取连接
[2021-02-21T15:56:58.189] [INFO] default - GET /post/query?type=all  200  3 ms
[2021-02-21T15:58:27.490] [INFO] default - 获取连接
[2021-02-21T15:58:27.499] [WARN] default - GET /post/query?type=all  304  29 ms
[2021-02-21T15:58:35.854] [INFO] default - 获取连接
[2021-02-21T15:58:35.858] [INFO] default - GET /post/query?type=all&limit=1  200  4 ms
[2021-02-21T15:58:45.432] [INFO] default - 获取连接
[2021-02-21T15:58:45.435] [INFO] default - GET /post/query?type=all&limit=2  200  3 ms
[2021-02-21T15:59:25.243] [INFO] default - 获取连接
[2021-02-21T15:59:25.245] [WARN] default - GET /post/query?type=all  304  3 ms
[2021-02-21T15:59:43.813] [INFO] default - 获取连接
[2021-02-21T15:59:43.815] [WARN] default - GET /post/query?type=all&limit=1  304  3 ms
[2021-02-21T16:02:22.698] [INFO] default - 获取连接
[2021-02-21T16:02:22.707] [WARN] default - GET /post/query?type=all&limit=1  304  30 ms
[2021-02-21T16:02:32.818] [INFO] default - 获取连接
[2021-02-21T16:02:32.822] [WARN] default - GET /post/query?type=all&limit=2  304  5 ms
[2021-02-21T16:03:15.159] [INFO] default - 获取连接
[2021-02-21T16:03:15.169] [INFO] default - GET /post/query?type=all  200  30 ms
[2021-02-21T20:36:47.236] [INFO] default - 获取连接
[2021-02-21T20:36:47.263] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  200  180 ms
[2021-02-21T20:36:49.109] [INFO] default - 获取连接
[2021-02-21T20:36:49.114] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T20:37:18.605] [INFO] default - 获取连接
[2021-02-21T20:37:18.609] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  5 ms
[2021-02-21T20:38:23.529] [INFO] default - 获取连接
[2021-02-21T20:38:23.534] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T20:39:26.326] [INFO] default - 获取连接
[2021-02-21T20:39:26.329] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:41:37.111] [INFO] default - 获取连接
[2021-02-21T20:41:37.114] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:45:43.232] [INFO] default - 获取连接
[2021-02-21T20:45:43.241] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  200  27 ms
[2021-02-21T20:46:40.999] [INFO] default - 获取连接
[2021-02-21T20:46:41.003] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  5 ms
[2021-02-21T20:46:53.551] [INFO] default - 获取连接
[2021-02-21T20:46:53.554] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T20:47:52.861] [INFO] default - 获取连接
[2021-02-21T20:47:52.864] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:47:57.200] [INFO] default - 获取连接
[2021-02-21T20:47:57.203] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:48:21.042] [INFO] default - 获取连接
[2021-02-21T20:48:21.044] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:48:26.336] [INFO] default - 获取连接
[2021-02-21T20:48:26.340] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T20:48:33.760] [INFO] default - 获取连接
[2021-02-21T20:48:33.763] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:52:53.274] [INFO] default - 获取连接
[2021-02-21T20:52:53.278] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:52:59.677] [INFO] default - 获取连接
[2021-02-21T20:52:59.680] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:53:10.872] [INFO] default - 获取连接
[2021-02-21T20:53:10.875] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=15  200  4 ms
[2021-02-21T20:53:13.793] [INFO] default - 获取连接
[2021-02-21T20:53:13.795] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=15  200  3 ms
[2021-02-21T20:53:15.209] [INFO] default - 获取连接
[2021-02-21T20:53:15.211] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=15  304  2 ms
[2021-02-21T20:53:16.590] [INFO] default - 获取连接
[2021-02-21T20:53:16.592] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=15  200  3 ms
[2021-02-21T20:53:17.786] [INFO] default - 获取连接
[2021-02-21T20:53:17.789] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=15  304  3 ms
[2021-02-21T20:53:19.829] [INFO] default - 获取连接
[2021-02-21T20:53:19.831] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=15  304  2 ms
[2021-02-21T20:53:20.957] [INFO] default - 获取连接
[2021-02-21T20:53:20.960] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=15  304  4 ms
[2021-02-21T20:53:21.933] [INFO] default - 获取连接
[2021-02-21T20:53:21.935] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=15  304  3 ms
[2021-02-21T20:53:23.089] [INFO] default - 获取连接
[2021-02-21T20:53:23.091] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=15  304  2 ms
[2021-02-21T20:53:24.989] [INFO] default - 获取连接
[2021-02-21T20:53:24.991] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=15  304  3 ms
[2021-02-21T20:53:27.559] [INFO] default - 获取连接
[2021-02-21T20:53:27.566] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  7 ms
[2021-02-21T20:53:50.411] [INFO] default - 获取连接
[2021-02-21T20:53:50.414] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T20:54:36.367] [INFO] default - 获取连接
[2021-02-21T20:54:36.371] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T20:54:38.364] [INFO] default - 获取连接
[2021-02-21T20:54:38.372] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  8 ms
[2021-02-21T20:56:04.079] [INFO] default - 获取连接
[2021-02-21T20:56:04.084] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  5 ms
[2021-02-21T20:56:05.334] [INFO] default - 获取连接
[2021-02-21T20:56:05.340] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  6 ms
[2021-02-21T20:56:20.557] [INFO] default - 获取连接
[2021-02-21T20:56:20.562] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  200  6 ms
[2021-02-21T20:56:24.058] [INFO] default - 获取连接
[2021-02-21T20:56:24.060] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  200  2 ms
[2021-02-21T20:57:09.520] [INFO] default - 获取连接
[2021-02-21T20:57:09.523] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  304  3 ms
[2021-02-21T20:57:13.086] [INFO] default - 获取连接
[2021-02-21T20:57:13.091] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  5 ms
[2021-02-21T20:57:14.544] [INFO] default - 获取连接
[2021-02-21T20:57:14.549] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  200  4 ms
[2021-02-21T20:57:20.908] [INFO] default - 获取连接
[2021-02-21T20:57:20.910] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  304  2 ms
[2021-02-21T20:57:21.893] [INFO] default - 获取连接
[2021-02-21T20:57:21.896] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=1  200  4 ms
[2021-02-21T20:57:22.776] [INFO] default - 获取连接
[2021-02-21T20:57:22.779] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  4 ms
[2021-02-21T20:57:54.994] [INFO] default - 获取连接
[2021-02-21T20:57:54.996] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  2 ms
[2021-02-21T20:58:53.029] [INFO] default - 获取连接
[2021-02-21T20:58:53.043] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  44 ms
[2021-02-21T20:58:54.412] [INFO] default - 获取连接
[2021-02-21T20:58:54.415] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  2 ms
[2021-02-21T20:59:33.980] [INFO] default - 获取连接
[2021-02-21T20:59:33.994] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  43 ms
[2021-02-21T20:59:35.827] [INFO] default - 获取连接
[2021-02-21T20:59:35.831] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  200  4 ms
[2021-02-21T20:59:36.861] [INFO] default - 获取连接
[2021-02-21T20:59:36.864] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  200  4 ms
[2021-02-21T20:59:38.089] [INFO] default - 获取连接
[2021-02-21T20:59:38.092] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=1  200  3 ms
[2021-02-21T20:59:39.522] [INFO] default - 获取连接
[2021-02-21T20:59:39.525] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  304  4 ms
[2021-02-21T20:59:54.526] [INFO] default - 获取连接
[2021-02-21T20:59:54.540] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  200  48 ms
[2021-02-21T20:59:55.620] [INFO] default - 获取连接
[2021-02-21T20:59:55.624] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  3 ms
[2021-02-21T20:59:56.281] [INFO] default - 获取连接
[2021-02-21T20:59:56.283] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  304  3 ms
[2021-02-21T20:59:57.282] [INFO] default - 获取连接
[2021-02-21T20:59:57.285] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=1  304  3 ms
[2021-02-21T21:00:11.089] [INFO] default - 获取连接
[2021-02-21T21:00:11.092] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  4 ms
[2021-02-21T21:00:11.755] [INFO] default - 获取连接
[2021-02-21T21:00:11.758] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  3 ms
[2021-02-21T21:00:12.841] [INFO] default - 获取连接
[2021-02-21T21:00:12.844] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  304  4 ms
[2021-02-21T21:02:23.307] [INFO] default - 获取连接
[2021-02-21T21:02:23.321] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  40 ms
[2021-02-21T21:02:24.636] [INFO] default - 获取连接
[2021-02-21T21:02:24.639] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  5 ms
[2021-02-21T21:03:22.410] [INFO] default - 获取连接
[2021-02-21T21:03:22.420] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  200  40 ms
[2021-02-21T21:03:28.052] [INFO] default - 获取连接
[2021-02-21T21:03:28.055] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  4 ms
[2021-02-21T21:04:01.106] [INFO] default - 获取连接
[2021-02-21T21:04:01.123] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  43 ms
[2021-02-21T21:04:04.165] [INFO] default - 获取连接
[2021-02-21T21:04:04.168] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  4 ms
[2021-02-21T21:04:06.222] [INFO] default - 获取连接
[2021-02-21T21:04:06.226] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  304  5 ms
[2021-02-21T21:04:11.114] [INFO] default - 获取连接
[2021-02-21T21:04:11.117] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=1  304  3 ms
[2021-02-21T21:05:02.311] [INFO] default - 获取连接
[2021-02-21T21:05:03.993] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  1712 ms
[2021-02-21T21:05:11.602] [INFO] default - 获取连接
[2021-02-21T21:05:11.623] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  50 ms
[2021-02-21T21:05:14.446] [INFO] default - 获取连接
[2021-02-21T21:05:14.459] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  13 ms
[2021-02-21T21:05:36.516] [INFO] default - 获取连接
[2021-02-21T21:05:36.545] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  56 ms
[2021-02-21T21:05:41.461] [INFO] default - 获取连接
[2021-02-21T21:05:41.473] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  13 ms
[2021-02-21T21:06:12.952] [INFO] default - 获取连接
[2021-02-21T21:06:12.976] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  55 ms
[2021-02-21T21:06:40.124] [INFO] default - 获取连接
[2021-02-21T21:06:40.145] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  50 ms
[2021-02-21T21:07:19.108] [INFO] default - 获取连接
[2021-02-21T21:07:19.125] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  48 ms
[2021-02-21T21:07:20.936] [INFO] default - 获取连接
[2021-02-21T21:07:20.951] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  200  16 ms
[2021-02-21T21:07:23.541] [INFO] default - 获取连接
[2021-02-21T21:07:23.553] [INFO] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  200  13 ms
[2021-02-21T21:07:24.558] [INFO] default - 获取连接
[2021-02-21T21:07:24.570] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=1  304  11 ms
[2021-02-21T21:07:25.723] [INFO] default - 获取连接
[2021-02-21T21:07:25.739] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  16 ms
[2021-02-21T21:07:43.351] [INFO] default - 获取连接
[2021-02-21T21:07:43.360] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=1&limit=1  304  34 ms
[2021-02-21T21:07:44.069] [INFO] default - 获取连接
[2021-02-21T21:07:44.073] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=2&limit=1  304  5 ms
[2021-02-21T21:07:44.804] [INFO] default - 获取连接
[2021-02-21T21:07:44.806] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=3&limit=1  304  3 ms
[2021-02-21T21:07:46.512] [INFO] default - 获取连接
[2021-02-21T21:07:46.515] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  2 ms
[2021-02-21T21:07:48.904] [INFO] default - 获取连接
[2021-02-21T21:07:48.910] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  6 ms
[2021-02-21T21:08:05.825] [INFO] default - 获取连接
[2021-02-21T21:08:05.829] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  3 ms
[2021-02-21T21:08:07.325] [INFO] default - 获取连接
[2021-02-21T21:08:07.329] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=1  304  4 ms
[2021-02-21T21:08:09.181] [INFO] default - 获取连接
[2021-02-21T21:08:09.185] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T21:08:11.508] [INFO] default - 获取连接
[2021-02-21T21:08:11.512] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  5 ms
[2021-02-21T21:09:15.441] [INFO] default - 获取连接
[2021-02-21T21:09:15.444] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:09:33.207] [INFO] default - 获取连接
[2021-02-21T21:09:33.210] [INFO] default - GET /post/query?type=all&title=66&keywords=&offset=0&limit=15  200  3 ms
[2021-02-21T21:09:39.776] [INFO] default - 获取连接
[2021-02-21T21:09:39.780] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  5 ms
[2021-02-21T21:09:48.532] [INFO] default - 获取连接
[2021-02-21T21:09:48.534] [INFO] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  200  3 ms
[2021-02-21T21:10:11.717] [INFO] default - 获取连接
[2021-02-21T21:10:11.719] [WARN] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:10:13.194] [INFO] default - 获取连接
[2021-02-21T21:10:13.197] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T21:10:21.550] [INFO] default - 获取连接
[2021-02-21T21:10:21.551] [INFO] default - GET /post/query?type=all&title=guid&keywords=&offset=0&limit=15  200  2 ms
[2021-02-21T21:11:09.042] [INFO] default - 获取连接
[2021-02-21T21:11:09.044] [WARN] default - GET /post/query?type=all&title=guid&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:11:14.369] [INFO] default - 获取连接
[2021-02-21T21:11:14.375] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  6 ms
[2021-02-21T21:11:21.253] [INFO] default - 获取连接
[2021-02-21T21:11:21.256] [WARN] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:11:33.703] [INFO] default - 获取连接
[2021-02-21T21:11:33.706] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:12:37.367] [INFO] default - 获取连接
[2021-02-21T21:12:37.369] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:12:44.368] [INFO] default - 获取连接
[2021-02-21T21:12:44.372] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T21:12:47.040] [INFO] default - 获取连接
[2021-02-21T21:12:47.044] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  5 ms
[2021-02-21T21:12:50.515] [INFO] default - 获取连接
[2021-02-21T21:12:50.518] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:12:52.381] [INFO] default - 获取连接
[2021-02-21T21:12:52.403] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  22 ms
[2021-02-21T21:12:55.190] [INFO] default - 获取连接
[2021-02-21T21:12:55.192] [WARN] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:13:04.482] [INFO] default - 获取连接
[2021-02-21T21:13:04.485] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:13:07.011] [INFO] default - 获取连接
[2021-02-21T21:13:07.014] [WARN] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:13:11.146] [INFO] default - 获取连接
[2021-02-21T21:13:11.149] [WARN] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:13:12.816] [INFO] default - 获取连接
[2021-02-21T21:13:12.817] [INFO] default - GET /post/query?type=all&title=666&keywords=&offset=0&limit=15  200  2 ms
[2021-02-21T21:13:13.267] [INFO] default - 获取连接
[2021-02-21T21:13:13.268] [WARN] default - GET /post/query?type=all&title=666&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:13:13.427] [INFO] default - 获取连接
[2021-02-21T21:13:13.429] [WARN] default - GET /post/query?type=all&title=666&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:13:37.679] [INFO] default - 获取连接
[2021-02-21T21:13:37.681] [WARN] default - GET /post/query?type=all&title=666&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:13:43.051] [INFO] default - 获取连接
[2021-02-21T21:13:43.056] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  6 ms
[2021-02-21T21:13:48.144] [INFO] default - 获取连接
[2021-02-21T21:13:48.147] [WARN] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:14:20.501] [INFO] default - 获取连接
[2021-02-21T21:14:20.505] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T21:14:22.728] [INFO] default - 获取连接
[2021-02-21T21:14:22.731] [WARN] default - GET /post/query?type=all&title=%E5%8A%A0%E5%85%A5&keywords=&offset=0&limit=15  304  4 ms
[2021-02-21T21:14:28.903] [INFO] default - 获取连接
[2021-02-21T21:14:28.905] [WARN] default - GET /post/query?type=all&title=666&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:14:33.227] [INFO] default - 获取连接
[2021-02-21T21:14:33.229] [INFO] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  200  2 ms
[2021-02-21T21:14:34.522] [INFO] default - 获取连接
[2021-02-21T21:14:34.524] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:14:35.192] [INFO] default - 获取连接
[2021-02-21T21:14:35.194] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:14:35.350] [INFO] default - 获取连接
[2021-02-21T21:14:35.351] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:16:08.017] [INFO] default - 获取连接
[2021-02-21T21:16:08.019] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:16:08.920] [INFO] default - 获取连接
[2021-02-21T21:16:08.923] [WARN] default - GET /post/query?type=all&title=&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:16:13.866] [INFO] default - 获取连接
[2021-02-21T21:16:13.867] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:16:26.262] [INFO] default - 获取连接
[2021-02-21T21:16:26.263] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  2 ms
[2021-02-21T21:16:35.531] [INFO] default - 获取连接
[2021-02-21T21:16:35.533] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  3 ms
[2021-02-21T21:16:52.528] [INFO] default - 获取连接
[2021-02-21T21:16:52.529] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  1 ms
[2021-02-21T21:18:19.048] [INFO] default - 获取连接
[2021-02-21T21:18:19.055] [WARN] default - GET /post/query?type=all&title=test&keywords=&offset=0&limit=15  304  32 ms
[2021-02-21T21:20:04.446] [INFO] default - 获取连接
[2021-02-21T21:20:04.454] [INFO] default - GET /post/query?type=all&keyword=&offset=0&limit=15  200  37 ms
[2021-02-21T21:20:12.929] [INFO] default - 获取连接
[2021-02-21T21:20:12.931] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T21:20:14.053] [INFO] default - 获取连接
[2021-02-21T21:20:14.058] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:20:32.514] [INFO] default - 获取连接
[2021-02-21T21:20:32.519] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:20:58.175] [INFO] default - 获取连接
[2021-02-21T21:20:58.178] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:21:06.935] [INFO] default - 获取连接
[2021-02-21T21:21:06.938] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%test%"' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%test%"' at line 3`,
  sqlState: '42000',
  index: 0,
  sql: '\n' +
    '        SELECT *\n' +
    '        FROM post\n' +
    '        where title LIKE "%test% orkeywords LIKE "%test%" \n' +
    '        '
}
[2021-02-21T21:21:06.965] [ERROR] default - GET /post/query?type=all&keyword=test&offset=0&limit=15  500  30 ms
[2021-02-21T21:21:07.872] [INFO] default - 获取连接
[2021-02-21T21:21:07.874] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%test%"' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%test%"' at line 3`,
  sqlState: '42000',
  index: 0,
  sql: '\n' +
    '        SELECT *\n' +
    '        FROM post\n' +
    '        where title LIKE "%test% orkeywords LIKE "%test%" \n' +
    '        '
}
[2021-02-21T21:21:07.896] [ERROR] default - GET /post/query?type=all&keyword=test&offset=0&limit=15  500  26 ms
[2021-02-21T21:21:24.683] [INFO] default - 获取连接
[2021-02-21T21:21:24.689] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%test%"' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Handshake.onConnect (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:64:7)
    at Handshake.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Handshake._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Handshake.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Handshake.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%test%"' at line 3`,
  sqlState: '42000',
  index: 0,
  sql: '\n' +
    '        SELECT *\n' +
    '        FROM post\n' +
    '        where title LIKE "%test% OR keywords LIKE "%test%" \n' +
    '        '
}
[2021-02-21T21:21:24.753] [ERROR] default - GET /post/query?type=all&keyword=test&offset=0&limit=15  500  93 ms
[2021-02-21T21:23:03.271] [INFO] default - 获取连接
[2021-02-21T21:23:03.274] [ERROR] default - Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '"%test%' at line 3
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Handshake.onConnect (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:64:7)
    at Handshake.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Handshake._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Handshake.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Handshake.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '"%test%' at line 3`,
  sqlState: '42000',
  index: 0,
  sql: '\n' +
    '        SELECT *\n' +
    '        FROM post\n' +
    '        where title LIKE "%test% \n' +
    '        '
}
[2021-02-21T21:23:03.355] [ERROR] default - GET /post/query?type=all&keyword=test&offset=0&limit=15  500  111 ms
[2021-02-21T21:24:00.527] [INFO] default - 获取连接
[2021-02-21T21:24:00.536] [INFO] default - GET /post/query?type=all&keyword=test&offset=0&limit=15  200  35 ms
[2021-02-21T21:24:07.900] [INFO] default - 获取连接
[2021-02-21T21:24:07.909] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  11 ms
[2021-02-21T21:25:23.420] [INFO] default - 获取连接
[2021-02-21T21:25:23.430] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  11 ms
[2021-02-21T21:26:03.813] [INFO] default - 获取连接
[2021-02-21T21:26:03.816] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:27:34.181] [INFO] default - 获取连接
[2021-02-21T21:27:34.186] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:27:36.008] [INFO] default - 获取连接
[2021-02-21T21:27:36.014] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  8 ms
[2021-02-21T21:28:05.183] [INFO] default - 获取连接
[2021-02-21T21:28:05.186] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:28:06.161] [INFO] default - 获取连接
[2021-02-21T21:28:06.165] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T21:28:28.377] [INFO] default - 获取连接
[2021-02-21T21:28:28.382] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:28:30.030] [INFO] default - 获取连接
[2021-02-21T21:28:30.034] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:48:16.763] [INFO] default - 获取连接
[2021-02-21T21:48:16.769] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  7 ms
[2021-02-21T21:48:18.298] [INFO] default - 获取连接
[2021-02-21T21:48:18.301] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:48:49.823] [INFO] default - 获取连接
[2021-02-21T21:48:49.825] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T21:49:37.565] [INFO] default - 获取连接
[2021-02-21T21:49:37.567] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T21:49:53.856] [INFO] default - 获取连接
[2021-02-21T21:49:53.860] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:50:26.065] [INFO] default - 获取连接
[2021-02-21T21:50:26.071] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  8 ms
[2021-02-21T21:50:52.434] [INFO] default - 获取连接
[2021-02-21T21:50:52.436] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T21:51:02.789] [INFO] default - 获取连接
[2021-02-21T21:51:02.791] [INFO] default - GET /post/getByPid?Pid=1  200  3 ms
[2021-02-21T21:51:54.596] [INFO] default - 获取连接
[2021-02-21T21:51:54.599] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T21:52:04.582] [INFO] default - 获取连接
[2021-02-21T21:52:04.585] [WARN] default - GET /post/getByPid?Pid=1  304  3 ms
[2021-02-21T21:52:36.055] [INFO] default - 获取连接
[2021-02-21T21:52:36.058] [WARN] default - GET /post/getByPid?Pid=1  304  3 ms
[2021-02-21T21:53:46.526] [INFO] default - 获取连接
[2021-02-21T21:53:46.528] [WARN] default - GET /post/getByPid?Pid=1  304  2 ms
[2021-02-21T21:53:48.847] [INFO] default - 获取连接
[2021-02-21T21:53:48.849] [WARN] default - GET /post/getByPid?Pid=1  304  3 ms
[2021-02-21T21:53:49.668] [INFO] default - 获取连接
[2021-02-21T21:53:49.673] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:54:03.200] [INFO] default - 获取连接
[2021-02-21T21:54:03.203] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:54:06.356] [INFO] default - 获取连接
[2021-02-21T21:54:06.359] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:54:08.319] [INFO] default - 获取连接
[2021-02-21T21:54:08.324] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  9 ms
[2021-02-21T21:54:26.617] [INFO] default - 获取连接
[2021-02-21T21:54:26.620] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  2 ms
[2021-02-21T21:54:29.911] [INFO] default - 获取连接
[2021-02-21T21:54:29.922] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  12 ms
[2021-02-21T21:54:36.522] [INFO] default - 获取连接
[2021-02-21T21:54:36.525] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:54:41.300] [INFO] default - 获取连接
[2021-02-21T21:54:41.307] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  9 ms
[2021-02-21T21:54:42.812] [INFO] default - 获取连接
[2021-02-21T21:54:42.813] [INFO] default - GET /post/getByPid?Pid=2  200  2 ms
[2021-02-21T21:56:22.854] [INFO] default - 获取连接
[2021-02-21T21:56:22.856] [WARN] default - GET /post/getByPid?Pid=2  304  2 ms
[2021-02-21T21:56:29.085] [INFO] default - 获取连接
[2021-02-21T21:56:29.088] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:56:30.942] [INFO] default - 获取连接
[2021-02-21T21:56:30.944] [WARN] default - GET /post/getByPid?Pid=2  304  2 ms
[2021-02-21T21:56:36.788] [INFO] default - 获取连接
[2021-02-21T21:56:36.792] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T21:57:01.026] [INFO] default - 获取连接
[2021-02-21T21:57:01.029] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T21:57:02.372] [INFO] default - 获取连接
[2021-02-21T21:57:02.374] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T21:57:04.612] [INFO] default - 获取连接
[2021-02-21T21:57:04.614] [WARN] default - GET /post/getByPid?Pid=1  304  2 ms
[2021-02-21T21:57:05.519] [INFO] default - 获取连接
[2021-02-21T21:57:05.524] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T21:57:06.720] [INFO] default - 获取连接
[2021-02-21T21:57:06.722] [WARN] default - GET /post/getByPid?Pid=2  304  3 ms
[2021-02-21T21:57:08.718] [INFO] default - 获取连接
[2021-02-21T21:57:08.725] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  9 ms
[2021-02-21T21:59:04.136] [INFO] default - 获取连接
[2021-02-21T21:59:04.139] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T21:59:08.171] [INFO] default - 获取连接
[2021-02-21T21:59:08.174] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:02:09.700] [INFO] default - 获取连接
[2021-02-21T22:02:09.821] [INFO] default - POST /post/deleteByPid  200  145 ms
[2021-02-21T22:03:25.696] [INFO] default - 获取连接
[2021-02-21T22:03:25.704] [INFO] default - GET /post/query?type=all&keyword=&offset=0&limit=15  200  11 ms
[2021-02-21T22:04:07.056] [INFO] default - 获取连接
[2021-02-21T22:04:07.060] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:04:09.850] [INFO] default - 获取连接
[2021-02-21T22:04:09.854] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T22:04:11.535] [INFO] default - 获取连接
[2021-02-21T22:04:11.538] [INFO] default - GET /post/query?type=0&keyword=&offset=0&limit=15  200  6 ms
[2021-02-21T22:04:14.232] [INFO] default - 获取连接
[2021-02-21T22:04:14.234] [INFO] default - GET /post/query?type=1&keyword=&offset=0&limit=15  200  3 ms
[2021-02-21T22:04:16.796] [INFO] default - 获取连接
[2021-02-21T22:04:16.800] [INFO] default - GET /post/query?type=2&keyword=&offset=0&limit=15  200  4 ms
[2021-02-21T22:04:19.510] [INFO] default - 获取连接
[2021-02-21T22:04:19.513] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:06:05.491] [INFO] default - 获取连接
[2021-02-21T22:06:05.494] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:06:25.029] [INFO] default - 获取连接
[2021-02-21T22:06:25.033] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T22:06:28.252] [INFO] default - 获取连接
[2021-02-21T22:06:28.256] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T22:08:41.277] [INFO] default - 获取连接
[2021-02-21T22:08:41.280] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T22:10:42.571] [INFO] default - 获取连接
[2021-02-21T22:10:42.574] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:10:44.324] [INFO] default - 获取连接
[2021-02-21T22:10:44.329] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T22:10:45.361] [INFO] default - 获取连接
[2021-02-21T22:10:45.363] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T22:11:00.339] [INFO] default - 获取连接
[2021-02-21T22:11:00.341] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T22:11:03.403] [INFO] default - 获取连接
[2021-02-21T22:11:03.406] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:11:20.043] [INFO] default - 获取连接
[2021-02-21T22:11:20.046] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T22:11:32.180] [INFO] default - 获取连接
[2021-02-21T22:11:32.183] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T22:11:46.258] [INFO] default - 获取连接
[2021-02-21T22:11:46.261] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:12:08.193] [INFO] default - OPTIONS /post/add  200  2 ms
[2021-02-21T22:12:08.199] [INFO] default - 获取连接
[2021-02-21T22:12:08.343] [INFO] default - POST /post/add  200  145 ms
[2021-02-21T22:12:11.406] [INFO] default - 获取连接
[2021-02-21T22:12:11.408] [INFO] default - GET /post/query?type=all&keyword=&offset=0&limit=15  200  4 ms
[2021-02-21T22:12:14.084] [INFO] default - 获取连接
[2021-02-21T22:12:14.087] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'undefined' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'undefined' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n    DELETE FROM post\n    where Pid=undefined\n    '
}
[2021-02-21T22:12:14.095] [ERROR] default - POST /post/deleteByPid  500  11 ms
[2021-02-21T22:13:00.419] [INFO] default - 获取连接
[2021-02-21T22:13:00.421] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'undefined' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'undefined' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n    DELETE FROM post\n    where Pid=undefined\n    '
}
[2021-02-21T22:13:00.429] [ERROR] default - POST /post/deleteByPid  500  10 ms
[2021-02-21T22:13:16.024] [INFO] default - 获取连接
[2021-02-21T22:13:16.026] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T22:13:20.753] [INFO] default - OPTIONS /post/deleteByPid  200  1 ms
[2021-02-21T22:13:20.758] [INFO] default - 获取连接
[2021-02-21T22:13:20.911] [INFO] default - POST /post/deleteByPid  200  154 ms
[2021-02-21T22:13:54.958] [INFO] default - 获取连接
[2021-02-21T22:13:54.960] [INFO] default - GET /post/query?type=all&keyword=&offset=0&limit=15  200  3 ms
[2021-02-21T22:14:06.589] [INFO] default - 获取连接
[2021-02-21T22:14:06.591] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:14:10.698] [INFO] default - 获取连接
[2021-02-21T22:14:10.701] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:14:12.826] [INFO] default - 获取连接
[2021-02-21T22:14:12.829] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T22:14:37.341] [INFO] default - OPTIONS /post/add  200  0 ms
[2021-02-21T22:14:37.346] [INFO] default - 获取连接
[2021-02-21T22:14:37.514] [INFO] default - POST /post/add  200  169 ms
[2021-02-21T22:14:40.623] [INFO] default - 获取连接
[2021-02-21T22:14:40.627] [INFO] default - GET /post/query?type=all&keyword=&offset=0&limit=15  200  5 ms
[2021-02-21T22:14:46.155] [INFO] default - OPTIONS /post/deleteByPid  200  0 ms
[2021-02-21T22:14:46.160] [INFO] default - 获取连接
[2021-02-21T22:14:46.332] [INFO] default - POST /post/deleteByPid  200  172 ms
[2021-02-21T22:14:46.343] [INFO] default - 获取连接
[2021-02-21T22:14:46.346] [INFO] default - GET /post/query?type=all&keyword=&offset=0&limit=15  200  4 ms
[2021-02-21T23:05:06.523] [INFO] default - 获取连接
[2021-02-21T23:05:06.527] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  7 ms
[2021-02-21T23:05:15.555] [INFO] default - 获取连接
[2021-02-21T23:05:15.557] [WARN] default - GET /post/getByPid?Pid=1  304  2 ms
[2021-02-21T23:05:20.640] [INFO] default - 获取连接
[2021-02-21T23:05:20.643] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T23:26:05.960] [INFO] default - 获取连接
[2021-02-21T23:26:05.969] [WARN] default - GET /post/query?type=0&keyword=&offset=0&limit=15  304  39 ms
[2021-02-21T23:26:07.969] [INFO] default - 获取连接
[2021-02-21T23:26:07.972] [WARN] default - GET /post/query?type=1&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T23:26:09.186] [INFO] default - 获取连接
[2021-02-21T23:26:09.189] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  4 ms
[2021-02-21T23:26:11.558] [INFO] default - 获取连接
[2021-02-21T23:26:11.560] [WARN] default - GET /post/query?type=1&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T23:27:26.770] [INFO] default - 获取连接
[2021-02-21T23:27:26.772] [WARN] default - GET /post/query?type=1&keyword=&offset=0&limit=15  304  2 ms
[2021-02-21T23:34:51.627] [INFO] default - 获取连接
[2021-02-21T23:34:51.632] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T23:37:41.128] [INFO] default - 获取连接
[2021-02-21T23:37:41.130] [WARN] default - GET /post/query?type=0&keyword=&offset=0&limit=15  304  3 ms
[2021-02-21T23:37:44.164] [INFO] default - 获取连接
[2021-02-21T23:37:44.166] [WARN] default - GET /post/getByPid?Pid=1  304  3 ms
[2021-02-21T23:37:45.359] [INFO] default - 获取连接
[2021-02-21T23:37:45.364] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T23:38:03.741] [INFO] default - 获取连接
[2021-02-21T23:38:03.745] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T23:38:46.222] [INFO] default - 获取连接
[2021-02-21T23:38:46.225] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username=undefined\n' +
    '            '
}
[2021-02-21T23:38:46.234] [ERROR] default - POST /user/login  500  13 ms
[2021-02-21T23:39:12.285] [ERROR] default - GET /user/login  404  2 ms
[2021-02-21T23:39:18.360] [INFO] default - 获取连接
[2021-02-21T23:39:18.362] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username=undefined\n' +
    '            '
}
[2021-02-21T23:39:18.373] [ERROR] default - POST /user/login  500  13 ms
[2021-02-21T23:40:19.424] [INFO] default - 获取连接
[2021-02-21T23:40:19.425] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username=undefined\n' +
    '            '
}
[2021-02-21T23:40:19.433] [ERROR] default - POST /user/login  500  9 ms
[2021-02-21T23:45:34.059] [INFO] default - 获取连接
[2021-02-21T23:45:34.061] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username=undefined\n' +
    '            '
}
[2021-02-21T23:45:34.068] [ERROR] default - POST /user/login  500  9 ms
[2021-02-21T23:49:38.713] [INFO] default - 获取连接
[2021-02-21T23:49:38.714] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username=undefined\n' +
    '            '
}
[2021-02-21T23:49:38.720] [ERROR] default - POST /user/login  500  8 ms
[2021-02-21T23:50:14.690] [INFO] default - OPTIONS /user/login  200  3 ms
[2021-02-21T23:50:14.731] [INFO] default - 获取连接
[2021-02-21T23:50:14.734] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Handshake.onConnect (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:64:7)
    at Handshake.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Handshake._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Handshake.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Handshake.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username=undefined\n' +
    '            '
}
[2021-02-21T23:50:14.747] [ERROR] default - POST /user/login  500  40 ms
[2021-02-21T23:50:40.638] [INFO] default - OPTIONS /user/login  200  0 ms
[2021-02-21T23:50:40.643] [INFO] default - 获取连接
[2021-02-21T23:50:40.644] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Ping.onOperationComplete (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Ping._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Ping.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username=admin\n' +
    '            '
}
[2021-02-21T23:50:40.668] [ERROR] default - POST /user/login  500  25 ms
[2021-02-21T23:51:02.475] [INFO] default - OPTIONS /user/login  200  3 ms
[2021-02-21T23:51:02.508] [INFO] default - 获取连接
[2021-02-21T23:51:02.511] [ERROR] default - Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Query.js:79:18)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:88:28)
    at Socket.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Socket.emit (events.js:210:5)
    at addChunk (_stream_readable.js:309:12)
    --------------------
    at Protocol._enqueue (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:198:25)
    at E:\Web-Prpjects\react_blog\backend\utils\connect.js:18:25
    at Handshake.onConnect (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Pool.js:64:7)
    at Handshake.<anonymous> (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:526:10)
    at Handshake._callback (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\Connection.js:488:16)
    at Handshake.Sequence.end (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Handshake.Sequence.OkPacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (E:\Web-Prpjects\react_blog\backend\node_modules\mysql\lib\protocol\Parser.js:433:10) {
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: "Unknown column 'username' in 'where clause'",
  sqlState: '42S22',
  index: 0,
  sql: '\n' +
    '            SELECT password\n' +
    '            FROM user\n' +
    '            WHERE username="admin"\n' +
    '            '
}
[2021-02-21T23:51:02.545] [ERROR] default - POST /user/login  500  57 ms
[2021-02-21T23:51:23.044] [INFO] default - OPTIONS /user/login  200  4 ms
[2021-02-21T23:51:23.081] [INFO] default - 获取连接
[2021-02-21T23:51:23.084] [INFO] default - POST /user/login  200  27 ms
[2021-02-21T23:51:23.400] [INFO] default - 获取连接
[2021-02-21T23:51:23.411] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  13 ms
[2021-02-21T23:52:07.737] [INFO] default - OPTIONS /user/login  200  4 ms
[2021-02-21T23:52:07.775] [INFO] default - 获取连接
[2021-02-21T23:52:07.780] [INFO] default - POST /user/login  200  29 ms
[2021-02-21T23:52:08.137] [INFO] default - 获取连接
[2021-02-21T23:52:08.141] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  6 ms
[2021-02-21T23:53:00.483] [INFO] default - OPTIONS /user/login  200  3 ms
[2021-02-21T23:53:00.525] [INFO] default - 获取连接
[2021-02-21T23:53:00.531] [INFO] default - POST /user/login  200  29 ms
[2021-02-21T23:53:08.766] [INFO] default - OPTIONS /user/login  200  0 ms
[2021-02-21T23:53:08.771] [INFO] default - 获取连接
[2021-02-21T23:53:08.777] [INFO] default - POST /user/login  200  7 ms
[2021-02-21T23:53:08.918] [INFO] default - 获取连接
[2021-02-21T23:53:08.921] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  5 ms
[2021-02-21T23:53:38.330] [INFO] default - OPTIONS /user/login  200  3 ms
[2021-02-21T23:53:38.365] [INFO] default - 获取连接
[2021-02-21T23:53:38.375] [INFO] default - POST /user/login  200  29 ms
[2021-02-21T23:53:38.529] [INFO] default - 获取连接
[2021-02-21T23:53:38.538] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  11 ms
[2021-02-21T23:54:14.341] [INFO] default - OPTIONS /user/login  200  4 ms
[2021-02-21T23:54:14.375] [INFO] default - 获取连接
[2021-02-21T23:54:14.384] [INFO] default - POST /user/login  200  29 ms
[2021-02-21T23:54:14.542] [INFO] default - 获取连接
[2021-02-21T23:54:14.555] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  18 ms
[2021-02-21T23:54:47.277] [INFO] default - 获取连接
[2021-02-21T23:54:47.285] [WARN] default - GET /post/query?type=all&keyword=&offset=0&limit=15  304  10 ms
